# 내일배움캠프 240603 TIL
Java 35일차
사용자 관리하기 (7~9)
-------------------------------------------------------------------------------


사용자 관리하기
## 07. 회원가입 구현
- 프로젝트 준비
    - 프로젝트 설정추가
        - build.gradle
            - [코드 스니펫] build.gradle : JPA, MySQL 추가

                ```groovy
                // JPA
                implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
                // MySQL
                runtimeOnly 'com.mysql:mysql-connector-j'
                ```

        - application.properties
            - [코드 스니펫] application.properties

                ```
                spring.datasource.url=jdbc:mysql://localhost:3306/auth
                spring.datasource.username=root
                spring.datasource.password={비밀번호}
                spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

                spring.jpa.hibernate.ddl-auto=update

                spring.jpa.properties.hibernate.show_sql=true
                spring.jpa.properties.hibernate.format_sql=true
                spring.jpa.properties.hibernate.use_sql_comments=true
                ```

        - Intellij Database 연동
            - CREATE DATABASE

                ```sql
                CREATE DATABASE auth;
                ```

            - 연동 순서
                1. Database 탭을 클릭하시고 + 버튼을 누릅니다.
                2. Data Source > MySQL 를 클릭합니다.
                3. User, Password, Database 정보를 추가한 후 Ok를 클릭합니다.
                4. MySQL Database에 연결이 완료되었습니다.

        - 페이지 Controller
            - [코드 스니펫] HomeController

                ```java
                package com.sparta.springauth.controller;

                import org.springframework.stereotype.Controller;
                import org.springframework.ui.Model;
                import org.springframework.web.bind.annotation.GetMapping;

                @Controller
                public class HomeController {

                    @GetMapping("/")
                    public String home(Model model) {
                        model.addAttribute("username", "username");
                        return "index";
                    }
                }
                ```

            - [코드 스니펫] UserController

                ```java
                package com.sparta.springauth.controller;

                import org.springframework.stereotype.Controller;
                import org.springframework.web.bind.annotation.GetMapping;
                import org.springframework.web.bind.annotation.RequestMapping;

                @Controller
                @RequestMapping("/api")
                public class UserController {

                    @GetMapping("/user/login-page")
                    public String loginPage() {
                        return "login";
                    }

                    @GetMapping("/user/signup")
                    public String signupPage() {
                        return "signup";
                    }
                }
                ```

    - 시작코드
        👉 src > main > resources > templates 에 아래 html 파일들의 코드스니펫을 사용하여 추가 해주세요.
        (혹시 없다면 만들어주세요.)
        - **[코드 스니펫] index.html**

            ```html
            <!doctype html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport"
                    content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
              <meta http-equiv="X-UA-Compatible" content="ie=edge">
            	<link rel="preconnect" href="https://fonts.gstatic.com">

              <link rel="stylesheet" href="/css/style.css">
              <script src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
              <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js"></script>
              <script src="/js/basic.js"></script>
              <title>나만의 셀렉샵</title>
            </head>
            <body>
            <div class="header" style="position:relative;">
              <div id="login-true" style="display: none">
                <div id="header-title-login-user">
                  <span th:text="${username}"></span> 님의
                </div>
                <div id="header-title-select-shop">
                  Select Shop
                </div>
                <a id="login-text" href="javascript:logout()">
                  로그아웃
                </a>
              </div>
              <div id="login-false" >
                <div id="header-title-select-shop">
                  My Select Shop
                </div>
                <a id="sign-text" href="/api/user/signup">
                  회원가입
                </a>
                <a id="login-text" href="/api/user/login-page">
                  로그인
                </a>
              </div>
            </div>
            </body>
            </html>
            ```

        - **[코드 스니펫] login.html**

            ```html
            <!DOCTYPE html>
            <html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport"
                    content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
              <meta http-equiv="X-UA-Compatible" content="ie=edge">
              <link rel="preconnect" href="https://fonts.gstatic.com">
              <link rel="stylesheet" type="text/css" href="/css/style.css">
              <meta charset="UTF-8">
              <title>로그인 페이지</title>
            </head>
            <body>
            <div id="login-form">
              <div id="login-title">Log into Select Shop</div>
              <br>
              <br>
              <button id="login-id-btn" onclick="location.href='/api/user/signup'">
                회원 가입하기
              </button>
              <form action="/api/user/login" method="post">
                <div class="login-id-label">아이디</div>
                <input type="text" name="username" class="login-input-box">

                <div class="login-id-label">비밀번호</div>
                <input type="password" name="password" class="login-input-box">

                <button id="login-id-submit">로그인</button>
              </form>
              <div id="login-failed" style="display: none" class="alert alert-danger" role="alert">로그인에 실패하였습니다.</div>
            </div>
            </body>
            <script>
              const href = location.href;
              const queryString = href.substring(href.indexOf("?")+1)
              if (queryString === 'error') {
                const errorDiv = document.getElementById('login-failed');
                errorDiv.style.display = 'block';
              }
            </script>
            </html>
            ```

        - **[코드 스니펫] signup.html**

            ```html
            <!DOCTYPE html>
            <html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:th="http://www.thymeleaf.org">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport"
                    content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
              <meta http-equiv="X-UA-Compatible" content="ie=edge">
              <link rel="preconnect" href="https://fonts.gstatic.com">
              <link rel="stylesheet" type="text/css" href="/css/style.css">
              <meta charset="UTF-8">
              <title>회원가입 페이지</title>
              <script>
                function onclickAdmin() {
                  // Get the checkbox
                  var checkBox = document.getElementById("admin-check");
                  // Get the output text
                  var box = document.getElementById("admin-token");

                  // If the checkbox is checked, display the output text
                  if (checkBox.checked == true){
                    box.style.display = "block";
                  } else {
                    box.style.display = "none";
                  }
                }
              </script>
            </head>
            <body>
            <div id="login-form">
              <div id="login-title">Sign up Select Shop</div>

              <form action="/api/user/signup" method="post">
                <div class="login-id-label">Username</div>
                <input type="text" name="username" placeholder="Username" class="login-input-box">

                <div class="login-id-label">Password</div>
                <input type="password" name="password" class="login-input-box">

                <div class="login-id-label">E-mail</div>
                <input type="text" name="email" placeholder="E-mail" class="login-input-box">

                <div>
                  <input id="admin-check" type="checkbox" name="admin" onclick="onclickAdmin()" style="margin-top: 40px;">관리자
                  <input id="admin-token" type="password" name="adminToken" placeholder="관리자 암호" class="login-input-box" style="display:none">
                </div>
                <button id="login-id-submit">회원 가입</button>
              </form>
            </div>
            </body>
            </html>
            ```

        👉 src > main > resources > static 에 css, js 폴더를 만들고, 아래 css, js 파일을 넣어주세요.
        - css
            - **[코드 스니펫] style.css**

                ```css
                * {
                    font-family: 'Georgia', serif;
                }

                body {
                    margin: 0px;
                }

                .header {
                    height: 255px;
                    box-sizing: border-box;
                    background-color: #15aabf;
                    color: white;
                    text-align: center;
                    padding-top: 80px;
                    /*padding: 50px;*/
                    font-size: 45px;
                    font-weight: bold;
                }

                #header-title-login-user {
                    font-size: 36px;
                    letter-spacing: -1.08px;
                }

                #header-title-select-shop {
                    margin-top: 20px;
                    font-size: 45px;
                    letter-spacing: 1.1px;
                }

                #login-form {
                    width: 538px;
                    height: 710px;
                    margin: 70px auto 141px auto;
                    display: flex;
                    flex-direction: column;
                    justify-content: flex-start;
                    align-items: center;
                    /*gap: 96px;*/
                    padding: 56px 0 0;
                    border-radius: 10px;
                    box-shadow: 0 4px 25px 0 rgba(0, 0, 0, 0.15);
                    background-color: #ffffff;
                }

                #login-title {
                    width: 303px;
                    height: 32px;
                    /*margin: 56px auto auto auto;*/
                    flex-grow: 0;
                    font-family: SpoqaHanSansNeo;
                    font-size: 32px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.96px;
                    text-align: left;
                    color: #212529;
                }

                #login-kakao-btn {
                    border-width: 0;
                    margin: 96px 0 8px;
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    /*margin: 0 0 8px;*/
                    padding: 11px 12px;
                    border-radius: 5px;
                    background-color: #ffd43b;

                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    color: #414141;
                }

                #login-id-btn {
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    /*margin: 8px 0 0;*/
                    padding: 11px 12px;
                    border-radius: 5px;
                    border: solid 1px #212529;
                    background-color: #ffffff;

                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    color: #414141;
                }

                .login-input-box {
                    border-width: 0;

                    width: 370px !important;
                    height: 52px;
                    margin: 14px 0 0;
                    border-radius: 5px;
                    background-color: #e9ecef;
                }

                .login-id-label {
                    /*width: 44.1px;*/
                    /*height: 16px;*/
                    width: 382px;
                    padding-left: 11px;
                    margin-top: 40px;
                    /*margin: 0 337.9px 14px 11px;*/
                    font-family: NotoSansCJKKR;
                    font-size: 16px;
                    font-weight: normal;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.8px;
                    text-align: left;
                    color: #212529;
                }

                #login-id-submit {
                    border-width: 0;
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    margin: 40px 0 0;
                    padding: 11px 12px;
                    border-radius: 5px;
                    background-color: #15aabf;

                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: normal;
                    text-align: center;
                    color: #ffffff;
                }

                #sign-text {
                    position:absolute;
                    top:48px;
                    right:110px;
                    font-size: 18px;
                    font-family: SpoqaHanSansNeo;
                    font-size: 18px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: 0.36px;
                    text-align: center;
                    color: #ffffff;
                }

                #login-text {
                    position:absolute;
                    top:48px;
                    right:50px;
                    font-size: 18px;
                    font-family: SpoqaHanSansNeo;
                    font-size: 18px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: 0.36px;
                    text-align: center;
                    color: #ffffff;
                }

                .alert-danger {
                    color: #721c24;
                    background-color: #f8d7da;
                    border-color: #f5c6cb;
                }

                .alert {
                    width: 300px;
                    margin-top: 22px;
                    padding: 1.75rem 1.25rem;
                    border: 1px solid transparent;
                    border-radius: .25rem;
                }
                ```

        - js
            - **[코드 스니펫] basic.js**

                ```jsx
                let host = 'http://' + window.location.host;

                $(document).ready(function () {
                    const auth = getToken();
                    if(auth === '') {
                        window.location.href = host + "/api/user/login-page";
                    } else {
                        $('#login-true').show();
                        $('#login-false').hide();
                    }
                })

                function logout() {
                    // 토큰 삭제
                    Cookies.remove('Authorization', { path: '/' });
                    window.location.href = host + "/api/user/login-page";
                }

                function getToken() {
                	  let auth = Cookies.get('Authorization');

                		if(auth === undefined) {
                	        return '';
                	   }

                		return auth;
                }
                ```

- 회원가입 설계
    [User 테이블](https://www.notion.so/5377a9732499480a9ec298f53f500e25?pvs=21)

    - 회원 DB에 매핑되는 **@Entity 클래스** 구현
        - **[코드 스니펫] User**

            ```java
            package com.sparta.springauth.entity;

            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.NoArgsConstructor;
            import lombok.Setter;

            @Entity
            @Getter
            @Setter
            @NoArgsConstructor
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;

                @Column(nullable = false, unique = true)
                private String username;

                @Column(nullable = false)
                private String password;

                @Column(nullable = false, unique = true)
                private String email;

                @Column(nullable = false)
                @Enumerated(value = EnumType.STRING)
                private UserRoleEnum role;
            }
            ```

        - `@Enumerated(value = EnumType.*STRING*)`
            - EnumType을 DB 컬럼에 저장할 때 사용하는 애너테이션입니다.
            - `EnumType.*STRING`* 옵션을 사용하면 **Enum의 이름을 DB에 그대로 저장합니다.
            - `USER(Authority.USER)` → USER

    - 관리자 회원 가입 인가 방법
        - **'관리자 가입 토큰'** 입력 필요

            : 랜덤하게 생성된 토큰 사용

            ```
            "AAABnvxRVklrnYxKZ0aHgTBcXukeZygoC"
            ```

            💡 잠깐!
            실제로 '관리자' 권한을 이렇게 엉성하게 부여해 주는 경우는 드뭅니다.
            해커가 해당 암호를 갈취하게 되면, 관리자 권한을 너무 쉽게 획득할 수 있게 되겠죠?

            보통 현업에서는
            1) '관리자' 권한을 부여할 수 있는 관리자 페이지 구현
            2) 승인자에 의한 결재 과정 구현 → 관리자 권한 부여

- 패스워드 암호화 이해
    🔥 회원 등록 시 '비밀번호'는 사용자가 입력한 문자 그대로 DB 에 등록하면  안 됩니다.
    '정보통신망법, 개인정보보호법' 에 의해 비밀번호 암호화(Encryption)가 의무입니다.

    - 예를 들어보겠습니다.
        - 앨리스가 여러분의 사이트에 회원가입을 하며 아이디, 패스워드를 입력하였습니다.
            - 아이디: alice
            - 패스워드: nobodynobody

        - 아무도 알 수 없기를 바라며 적은 패스워드를 아래와 같이 DB 에 평문 그대로 저장해 두었다고 해보겠습니다.
            - 만약 해커에 의해 회원정보가 갈취당한다면 앨리스의 패스워드는 모두가 알게 됩니다.
            - 꼭 해커 뿐만 아니겠죠. DB 조회가 가능한 내부 관계자들도 앨리스의 패스워드를 보자마자 영원히 기억해 버릴지도 모릅니다.

        - 그래서 아래와 같이 **암호화 후 패스워드 저장**이 필요 합니다.
            - 평문 → **(암호화 알고리즘)** → 암호문
                - "nobodynobody" → "$2a$10$.."

        - 만약 해커가 DB 에 있는 앨리스의 패스워드 정보를 갈취하더라도 실제 암호를 알 수 없습니다. 그래서 복호화가 불가능한 **'단방향' 암호 알고리즘** 사용이 필요합니다.

    - 양방향 ↔ 단방향
        - 양방향 암호 알고리즘
            - 암호화: 평문 → **(암호화 알고리즘)** → 암호문
            - 복호화: 암호문 → (암호화 알고리즘) → 평문
        - 단방향 암호 알고리즘
            - 암호화: 평문 → **(암호화 알고리즘)** → 암호문
            - 복호화: **불가** (~~암호문 → (암호화 알고리즘) → 평문)~~

            ❓그럼 **사용자**가 로그인할 때는 **암호화된 패스워드를 기억**해야 할까요?

            - Password 확인절차
                1. 사용자가 로그인을 위해 "**아이디,** **패스워드 (평문)"** 입력 → 서버에 로그인 요청
                    1. 서버에서 패스워드 (평문) 을 암호화
                    2. 평문 → **(암호화 알고리즘)** → 암호문
                2. DB 에 저장된 "**아이디, 패스워드 (암호문)**"와 일치 여부 확인

    - Password Matching
        🔥 Spring Security라는 프레임워크에서 제공하는 비밀번호 암호화 기능을 사용해보겠습니다.
        일전에 Bean 수동등록 예제로 봤던 PasswordEncoder가 해당 Security에서 제공하는 비밀번호 암호화 메서드 입니다.
        사용자가 입력한 비밀번호를 암호화되어 저장된 비밀번호와 비교하여 일치여부를 확인해주는 기능도 가지고 있어 많이 사용됩니다.

        ```java
        // 사용예시
        // 비밀번호 확인
        if(!passwordEncoder.matches("사용자가 입력한 비밀번호", "저장된 비밀번호")) {
        		   throw new IllegalAccessError("비밀번호가 일치하지 않습니다.");
         }
        ```

        - boolean matches(CharSequence rawPassword, String encodedPassword);
            - rawPassword : 사용자가 입력한 비밀번호
            - encodedPassword : 암호화되어 DB 에 저장된 비밀번호

- 회원가입 API 구현
    - **[코드 스니펫] SignupRequestDto**

        ```java
        package com.sparta.springauth.dto;

        import lombok.Getter;
        import lombok.Setter;

        @Getter
        @Setter
        public class SignupRequestDto {
            private String username;
            private String password;
            private String email;
            private boolean admin = false;
            private String adminToken = "";
        }
        ```

    - **[코드 스니펫] UserService**

        ```java
        package com.sparta.springauth.service;

        import com.sparta.springauth.dto.SignupRequestDto;
        import com.sparta.springauth.entity.User;
        import com.sparta.springauth.entity.UserRoleEnum;
        import com.sparta.springauth.repository.UserRepository;
        import org.springframework.security.crypto.password.PasswordEncoder;
        import org.springframework.stereotype.Service;

        import java.util.Optional;

        @Service
        public class UserService {

            private final UserRepository userRepository;
            private final PasswordEncoder passwordEncoder;

            public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
                this.userRepository = userRepository;
                this.passwordEncoder = passwordEncoder;
            }

            // ADMIN_TOKEN
            private final String ADMIN_TOKEN = "AAABnvxRVklrnYxKZ0aHgTBcXukeZygoC";

            public void signup(SignupRequestDto requestDto) {
                String username = requestDto.getUsername();
                String password = passwordEncoder.encode(requestDto.getPassword());

                // 회원 중복 확인
                Optional<User> checkUsername = userRepository.findByUsername(username);
                if (checkUsername.isPresent()) {
                    throw new IllegalArgumentException("중복된 사용자가 존재합니다.");
                }

                // email 중복확인
                String email = requestDto.getEmail();
                Optional<User> checkEmail = userRepository.findByEmail(email);
                if (checkEmail.isPresent()) {
                    throw new IllegalArgumentException("중복된 Email 입니다.");
                }

                // 사용자 ROLE 확인
                UserRoleEnum role = UserRoleEnum.USER;
                if (requestDto.isAdmin()) {
                    if (!ADMIN_TOKEN.equals(requestDto.getAdminToken())) {
                        throw new IllegalArgumentException("관리자 암호가 틀려 등록이 불가능합니다.");
                    }
                    role = UserRoleEnum.ADMIN;
                }

                // 사용자 등록
                User user = new User(username, password, email, role);
                userRepository.save(user);
            }
        }
        ```

## 08. 로그인 구현 : JWT
- 로그인 API 구현
    - **[코드 스니펫] LoginRequestDto**

        ```java
        package com.sparta.springauth.dto;

        import lombok.Getter;
        import lombok.Setter;

        @Setter
        @Getter
        public class LoginRequestDto {
            private String username;
            private String password;
        }
        ```

    - **[코드 스니펫] UserService**

        ```java
        package com.sparta.springauth.service;

        import com.sparta.springauth.dto.LoginRequestDto;
        import com.sparta.springauth.dto.SignupRequestDto;
        import com.sparta.springauth.entity.User;
        import com.sparta.springauth.entity.UserRoleEnum;
        import com.sparta.springauth.jwt.JwtUtil;
        import com.sparta.springauth.repository.UserRepository;
        import jakarta.servlet.http.HttpServletResponse;
        import org.springframework.security.crypto.password.PasswordEncoder;
        import org.springframework.stereotype.Service;

        import java.util.Optional;

        @Service
        public class UserService {

            private final UserRepository userRepository;
            private final PasswordEncoder passwordEncoder;
            private final JwtUtil jwtUtil;

            public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder, JwtUtil jwtUtil) {
                this.userRepository = userRepository;
                this.passwordEncoder = passwordEncoder;
                this.jwtUtil = jwtUtil;
            }

            // ADMIN_TOKEN
            private final String ADMIN_TOKEN = "AAABnvxRVklrnYxKZ0aHgTBcXukeZygoC";

            public void signup(SignupRequestDto requestDto) {
                String username = requestDto.getUsername();
                String password = passwordEncoder.encode(requestDto.getPassword());

                // 회원 중복 확인
                Optional<User> checkUsername = userRepository.findByUsername(username);
                if (checkUsername.isPresent()) {
                    throw new IllegalArgumentException("중복된 사용자가 존재합니다.");
                }

                // email 중복확인
                String email = requestDto.getEmail();
                Optional<User> checkEmail = userRepository.findByEmail(email);
                if (checkEmail.isPresent()) {
                    throw new IllegalArgumentException("중복된 Email 입니다.");
                }

                // 사용자 ROLE 확인
                UserRoleEnum role = UserRoleEnum.USER;
                if (requestDto.isAdmin()) {
                    if (!ADMIN_TOKEN.equals(requestDto.getAdminToken())) {
                        throw new IllegalArgumentException("관리자 암호가 틀려 등록이 불가능합니다.");
                    }
                    role = UserRoleEnum.ADMIN;
                }

                // 사용자 등록
                User user = new User(username, password, email, role);
                userRepository.save(user);
            }

            public void login(LoginRequestDto requestDto, HttpServletResponse res) {
                String username = requestDto.getUsername();
                String password = requestDto.getPassword();

                // 사용자 확인
                User user = userRepository.findByUsername(username).orElseThrow(
                        () -> new IllegalArgumentException("등록된 사용자가 없습니다.")
                );

                // 비밀번호 확인
                if (!passwordEncoder.matches(password, user.getPassword())) {
                    throw new IllegalArgumentException("비밀번호가 일치하지 않습니다.");
                }

                // JWT 생성 및 쿠키에 저장 후 Response 객체에 추가
                String token = jwtUtil.createToken(user.getUsername(), user.getRole());
                jwtUtil.addJwtToCookie(token, res);
            }
        }
        ```

## 09. 필터
- Filter란?
    - Filter란 Web 애플리케이션에서 관리되는 영역으로 Client로 부터 오는 요청과 응답에 대해 최초/최종 단계의 위치이며 이를 통해 요청과 응답의 정보를 변경하거나 부가적인 기능을 추가할 수 있습니다.
    - 주로 범용적으로 처리해야 하는 작업들, 예를들어 로깅 및 보안 처리에 활용합니다.
        - 또한 인증, 인가와 관련된 로직들을 처리할 수도 있습니다.
        - Filter를 사용하면 인증, 인가와 관련된 로직을 비즈니스 로직과 분리하여 관리할 수 있다는 장점이 있습니다.

- Filter Chain
    - Filter는 한 개만 존재하는 것이 아니라 이렇게 여러 개가 Chain 형식으로 묶여서 처리될 수 있습니다.

- Filter 적용
    📌 요청 URL의 인가 처리 및 인증 처리를 진행할 수 있는 Filter를 구현해보겠습니다.
    추가로 요청 URL을 로깅해주는 Filter도 구현해보겠습니다.

    1. Request URL Logging

        ```java
        @Slf4j(topic = "LoggingFilter")
        @Component
        @Order(1)
        public class LoggingFilter implements Filter {
            @Override
            public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
                // 전처리
                HttpServletRequest httpServletRequest = (HttpServletRequest) request;
                String url = httpServletRequest.getRequestURI();
                log.info(url);

                chain.doFilter(request, response); // 다음 Filter 로 이동

                // 후처리
                log.info("비즈니스 로직 완료");
            }
        }
        ```

        - [코드 스니펫] filter > LoggingFilter

            ```java
            package com.sparta.springauth.filter;

            import jakarta.servlet.*;
            import jakarta.servlet.http.HttpServletRequest;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.core.annotation.Order;
            import org.springframework.stereotype.Component;

            import java.io.IOException;

            @Slf4j(topic = "LoggingFilter")
            @Component
            @Order(1)
            public class LoggingFilter implements Filter {
                @Override
                public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
                    // 전처리
                    HttpServletRequest httpServletRequest = (HttpServletRequest) request;
                    String url = httpServletRequest.getRequestURI();
                    log.info(url);

                    chain.doFilter(request, response); // 다음 Filter 로 이동

                    // 후처리
                    log.info("비즈니스 로직 완료");
                }
            }
            ```

        - `@Order(1)` 로 필터의 순서를 지정합니다.
        - `chain.doFilter(request, response);` 다음 Filter로 이동시킵니다.
        - `log.info("비즈니스 로직 완료");`
            - 작업이 다 완료된 후 Client에 응답 전 로그가 작성된 것을 확인할 수 있습니다.
    2. AuthFilter : 인증 및 인가 처리 필터

        ```java
        @Slf4j(topic = "AuthFilter")
        @Component
        @Order(2)
        public class AuthFilter implements Filter {

            private final UserRepository userRepository;
            private final JwtUtil jwtUtil;

            public AuthFilter(UserRepository userRepository, JwtUtil jwtUtil) {
                this.userRepository = userRepository;
                this.jwtUtil = jwtUtil;
            }

            @Override
            public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
                HttpServletRequest httpServletRequest = (HttpServletRequest) request;
                String url = httpServletRequest.getRequestURI();

                if (StringUtils.hasText(url) &&
                        (url.startsWith("/api/user") || url.startsWith("/css") || url.startsWith("/js"))
                ) {
                    // 회원가입, 로그인 관련 API 는 인증 필요없이 요청 진행
                    chain.doFilter(request, response); // 다음 Filter 로 이동
                } else {
                    // 나머지 API 요청은 인증 처리 진행
                    // 토큰 확인
                    String tokenValue = jwtUtil.getTokenFromRequest(httpServletRequest);

                    if (StringUtils.hasText(tokenValue)) { // 토큰이 존재하면 검증 시작
                        // JWT 토큰 substring
                        String token = jwtUtil.substringToken(tokenValue);

                        // 토큰 검증
                        if (!jwtUtil.validateToken(token)) {
                            throw new IllegalArgumentException("Token Error");
                        }

                        // 토큰에서 사용자 정보 가져오기
                        Claims info = jwtUtil.getUserInfoFromToken(token);

                        User user = userRepository.findByUsername(info.getSubject()).orElseThrow(() ->
                                new NullPointerException("Not Found User")
                        );

                        request.setAttribute("user", user);
                        chain.doFilter(request, response); // 다음 Filter 로 이동
                    } else {
                        throw new IllegalArgumentException("Not Found Token");
                    }
                }
            }

        }
        ```

        - [코드 스니펫] filter > AuthFilter

            ```java
            package com.sparta.springauth.filter;

            import com.sparta.springauth.entity.User;
            import com.sparta.springauth.jwt.JwtUtil;
            import com.sparta.springauth.repository.UserRepository;
            import io.jsonwebtoken.Claims;
            import jakarta.servlet.*;
            import jakarta.servlet.http.HttpServletRequest;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.core.annotation.Order;
            import org.springframework.stereotype.Component;
            import org.springframework.util.StringUtils;

            import java.io.IOException;

            @Slf4j(topic = "AuthFilter")
            @Component
            @Order(2)
            public class AuthFilter implements Filter {

                private final UserRepository userRepository;
                private final JwtUtil jwtUtil;

                public AuthFilter(UserRepository userRepository, JwtUtil jwtUtil) {
                    this.userRepository = userRepository;
                    this.jwtUtil = jwtUtil;
                }

                @Override
                public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
                    HttpServletRequest httpServletRequest = (HttpServletRequest) request;
                    String url = httpServletRequest.getRequestURI();

                    if (StringUtils.hasText(url) &&
                            (url.startsWith("/api/user") || url.startsWith("/css") || url.startsWith("/js"))
                    ) {
                        // 회원가입, 로그인 관련 API 는 인증 필요없이 요청 진행
                        chain.doFilter(request, response); // 다음 Filter 로 이동
                    } else {
                        // 나머지 API 요청은 인증 처리 진행
                        // 토큰 확인
                        String tokenValue = jwtUtil.getTokenFromRequest(httpServletRequest);

                        if (StringUtils.hasText(tokenValue)) { // 토큰이 존재하면 검증 시작
                            // JWT 토큰 substring
                            String token = jwtUtil.substringToken(tokenValue);

                            // 토큰 검증
                            if (!jwtUtil.validateToken(token)) {
                                throw new IllegalArgumentException("Token Error");
                            }

                            // 토큰에서 사용자 정보 가져오기
                            Claims info = jwtUtil.getUserInfoFromToken(token);

                            User user = userRepository.findByUsername(info.getSubject()).orElseThrow(() ->
                                    new NullPointerException("Not Found User")
                            );

                            request.setAttribute("user", user);
                            chain.doFilter(request, response); // 다음 Filter 로 이동
                        } else {
                            throw new IllegalArgumentException("Not Found Token");
                        }
                    }
                }

            }
            ```

        - `httpServletRequest.getRequestURI()` 요청 URL을 가져와서 구분합니다. (인가)
            - `"/api/user"`, `"/css"`, `"/js"` 로 시작하는 URL은 인증 처리에서 제외 시킵니다.
        - 그 외 URL은 인증 처리를 진행합니다.
            - `jwtUtil.getTokenFromRequest(httpServletRequest);`
                - `httpServletRequest` 에서 Cookie 목록을 가져와 JWT가 저장된 Cookie를 찾습니다.
                - `getTokenFromRequest` 메서드를 JwtUtil에 구현합니다.

                    ```java
                    // HttpServletRequest 에서 Cookie Value : JWT 가져오기
                    public String getTokenFromRequest(HttpServletRequest req) {
                        Cookie[] cookies = req.getCookies();
                        if(cookies != null) {
                            for (Cookie cookie : cookies) {
                                if (cookie.getName().equals(AUTHORIZATION_HEADER)) {
                                    try {
                                        return URLDecoder.decode(cookie.getValue(), "UTF-8"); // Encode 되어 넘어간 Value 다시 Decode
                                    } catch (UnsupportedEncodingException e) {
                                        return null;
                                    }
                                }
                            }
                        }
                        return null;
                    }
                    ```

                    - [코드 스니펫] getTokenFromRequest

                        ```java
                        // HttpServletRequest 에서 Cookie Value : JWT 가져오기
                        public String getTokenFromRequest(HttpServletRequest req) {
                            Cookie[] cookies = req.getCookies();
                            if(cookies != null) {
                                for (Cookie cookie : cookies) {
                                    if (cookie.getName().equals(AUTHORIZATION_HEADER)) {
                                        try {
                                            return URLDecoder.decode(cookie.getValue(), "UTF-8"); // Encode 되어 넘어간 Value 다시 Decode
                                        } catch (UnsupportedEncodingException e) {
                                            return null;
                                        }
                                    }
                                }
                            }
                            return null;
                        }
                        ```

            - tokenValue가 존재하면 토큰 파싱, 검증을 진행하고 사용자 정보를 가져옵니다.
            - 가져온 사용자 username을 사용해서 DB에 사용자가 존재하는지 확인하고 존재하면 인증이 완료된 것입니다.
            - 사용자 정보가 필요한 Controller API에 인증완료된 User 객체를 전달해 줍니다.

                ```java
                @Controller
                @RequestMapping("/api")
                public class ProductController {

                    @GetMapping("/products")
                    public String getProducts(HttpServletRequest req) {
                        System.out.println("ProductController.getProducts : 인증 완료");
                        User user = (User) req.getAttribute("user");
                        System.out.println("user.getUsername() = " + user.getUsername());

                       return "redirect:/";
                    }
                }
                ```

                - [코드 스니펫] ProductController

                    ```java
                    package com.sparta.springauth.controller;

                    import com.sparta.springauth.entity.User;
                    import jakarta.servlet.http.HttpServletRequest;
                    import org.springframework.stereotype.Controller;
                    import org.springframework.web.bind.annotation.GetMapping;
                    import org.springframework.web.bind.annotation.RequestMapping;

                    @Controller
                    @RequestMapping("/api")
                    public class ProductController {

                        @GetMapping("/products")
                        public String getProducts(HttpServletRequest req) {
                            System.out.println("ProductController.getProducts : 인증 완료");
                            User user = (User) req.getAttribute("user");
                            System.out.println("user.getUsername() = " + user.getUsername());

                            return "redirect:/";
                        }
                    }
                    ```

                - 사용자 본인이 등록한 제품만 조회하는 기능의 API라 가정해보겠습니다.
                - Filter에서 인증 처리되어 넘어온 User 객체를 사용하면 API 요청을 한 해당 사용자가 등록한 제품만 조회할 수 있습니다.