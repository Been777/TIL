# 내일배움캠프 240507~8 TIL
Java 14일차
팀과제
---------------------------------------------

**캠프 관리 프로그램**
프로그램 역할 : 내배캠 스프링 수강생들을 관리하는 프로그램

### **요구사항 정의**
- 캠프에는 필수 과목과 선택 과목이 존재합니다.


    | 필수 과목 목록 |
    | --- |
    | Java |
    | 객체지향 |
    | Spring |
    | JPA |
    | MySQL |

    | 선택 과목 목록 |
    | --- |
    | 디자인 패턴 |
    | Spring Security |
    | Redis |
    | MongoDB |
    - 조건
        - 최소 3개 이상의 필수 과목, 2개 이상의 선택 과목을 선택합니다.
        - 캠프 기간동안 선택한 과목별로 총 10회의 시험을 봅니다.
        - 캠프 매니저는 수강생을 등록 및 관리할 수 있습니다.
        - 캠프 매니저는 수강생들의 과목과 시험 점수를 등록 및 관리할 수 있습니다.
        - 점수 데이터 타입 : 정수형
        - 점수에 따라 등급이 매겨집니다.
        과목: Java
        1회차
        2회차
        3회차
        …
        D
        D
        B
        …
         등급 산정 기준
        필수 과목
        A
        B
        C
        D
        F
        N
        95 ~ 100
        90 ~ 94
        80 ~ 89
        70 ~ 79
        60 ~ 69
        60점 미만
        선택 과목
        A
        B
        C
        D
        F
        N
        90 ~ 100
        80 ~ 89
        70 ~ 79
        60 ~ 69
        50 ~ 59
        50점 미만

- 모델 정보 예시


    | 수강생 |
    | --- |
    | 고유 번호 |
    | 이름 |
    | 과목 목록 |

    | 점수 |
    | --- |
    | 과목 고유 번호 |
    | 수강생 고유 번호 |
    | 회차 |
    | 점수 |
    | 등급 (A, B, C, D, E, F, N) |

    | 과목 |
    | --- |
    | 고유 번호 |
    | 과목명 |
    | 과목타입 (필수, 선택) |

-------------------------------------------------------------------

### ⚙️ **기능 명세서**
- 필수 요구 사항
    - 수강생 관리
        - 주의‼️
            - 수강생의 고유번호는 중복될 수 없습니다.
        1. 수강생 정보를 등록할 수 있습니다.


            | 등록 필수 정보 |
            | --- |
            | 고유 번호 |
            | 이름 |
            | 과목 목록 |
        2. 수강생 목록을 조회할 수 있습니다. 조회 형식은 자유입니다.


            | 조회 필수 정보 |
            | --- |
            | 고유 번호 |
            | 이름 |
    - 점수 관리
        - 주의‼️
            - 등록하려는 과목의 회차 점수가 이미 등록되어 있다면 등록할 수 없습니다. 과목의 회차 점수가 중복되어 등록될 수 없습니다.
            - 회차에 10 초과 및 1 미만의 수가 저장될 수 없습니다. (회차 범위: 1 ~ 10)
            - 점수에 100 초과 및 음수가 저장될 수 없습니다. (점수 범위: 0 ~ 100)
        1. 수강생의 과목별 시험 회차 및 점수를 등록할 수 있습니다.
            - 점수를 등록하면 자동으로 등급이 추가 저장됩니다.
        2. 수강생의 과목별 회차 점수를 수정할 수 있습니다.
        3. 수강생의 특정 과목 회차별 등급을 조회할 수 있습니다.
            - 조회 형식은 자유입니다.

- 추가 요구 사항
    - 수강생 관리
        1. 수강생 상태를 관리할 수 있습니다.


            | 상태 종류 |
            | --- |
            | Green |
            | Red |
            | Yellow |
        2. 수강생 정보를 조회할 수 있습니다. 조회 형식은 자유입니다.


            | 조회 필수 정보 |
            | --- |
            | 고유 번호 |
            | 이름 |
            | 상태 |
            | 선택한 과목명 |
        3. 수강생 정보를 수정할 수 있습니다.
            - 이름 또는 상태를 입력받아 수정하시면 됩니다.

            | 수정 가능한 정보 |
            | --- |
            | 이름 |
            | 상태 |
        4. 상태별 수강생 목록을 조회할 수 있습니다. 조회 형식은 자유입니다.


            | 조회 필수 정보 |
            | --- |
            | 고유 번호 |
            | 이름 |
        5. 수강생을 삭제할 수 있습니다.
            - 해당 수강생의 점수 기록도 함께 삭제됩니다.
    - 점수 관리
        1. 수강생의 과목별 평균 등급을 조회할 수 있습니다. 조회 형식은 자유입니다.


            | 조회 필수 정보 |
            | --- |
            | 과목명 |
            | 평균 등급 |
        2. 특정 상태 수강생들의 필수 과목 평균 등급을 조회합니다. 조회 형식은 자유입니다.
----------------------------------------------------------------------------

여기서 내가 맡은 파트는
필수 요구 사항에서
2. 수강생 목록을 조회할 수 있습니다. 조회 형식은 자유입니다.
| 조회 필수 정보 |
| --- |
| 고유 번호 |
| 이름 |
추가 요구 사항에서
2. 수강생 정보를 조회할 수 있습니다. 조회 형식은 자유입니다.
| 조회 필수 정보 |
| --- |
| 고유 번호 |
| 이름 |
| 상태 |
| 선택한 과목명 |

------------------------------------------------------------------------------

사전에 준비된 템플릿을 활용하여 진행하면 된다.
 // 수강생 목록 조회
    private static void inquireStudent() {
        System.out.println("\n수강생 목록을 조회합니다...");
        // 기능 구현
        System.out.println("\n수강생 목록 조회 성공!");
    }

고인물, 지피티의 도움으로 구현 해보았다.
우선 필수 요구 사항
private static void inquireStudent() {
        System.out.println("\n수강생 목록을 조회합니다...");

        for (Student student : studentStore) {
            System.out.println("고유 번호 : " + student.getStudentId() + "이름 : " + student.getStudentName());
        }
        System.out.println("\n수강생 목록 조회 성공!");
    }

향상된 for문으로 구현하였다. 여기서 포인트는 객체가 만들어져있나 배열이 어떻게 구성이 되었는가 인거같다.
고유번호, 이름이란 객체를 만들고 가져오면 된다

다음으로 추가 요구 사항까지 구현했다,
private static void inquireStudent() {
        System.out.println("\n수강생 목록을 조회합니다...");

        for (Student student : studentStore) {
            System.out.println("고유 번호 : " + student.getStudentId() + "이름 : " + student.getStudentName() + "상태 : " + student.getCondition());
        }
        for (Subject subject : subjectStore) {
            System.out.println("선택한 과목명 : " + subject.getSubjectName());
        }
        System.out.println("\n수강생 목록 조회 성공!");
    }

추가 요구 사항에서 상태, 선택한 과목명이 새롭게 추가 되었다. 새롭게 추가된 상태, 과목명을
객체 만들어주고 가져오면 된다.