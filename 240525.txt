# 내일배움캠프 240525 TIL
Java 28일차
인증과 인가
-------------------------------------------------------------------------------

# 인증과 인가

## 03. 인증과 인가란 무엇일까?
- 인증과 인가
    - **인증(Authentication)**
        - 인증은 해당 유저가 실제 유저인지 인증하는 개념입니다.
        - 여러분의 스마트폰에 지문인식, 이용하는 사이트에 로그인 등과 같이, 실제 그 유저가 맞는지를 확인하는 절차 입니다.
    - **인가(Authorization)**
        - 인가는 해당 유저가 특정 리소스에 접근이 가능한지 허가를 확인하는 개념입니다. 예를들어 관리자 페이지-관리자 권한 같은 것들을 들 수 있습니다.

    📌 우리가 인증과 인가를 헷갈려 하는 이유는 로그인만 생각해서 입니다.
    우리가 자주 하는 로그인은 인증을 할 때(비밀번호 입력하고 제출 할 때)이고
    회원/비회원 여부에 따라 다른 권한을 받는 것이 인가입니다.

- **“웹 애플리케이션 인증”**은 어떠한 특수성이 있을까?
    1. 일반적으로 서버-클라이언트 구조로 되어있고, 실제로 이 두가지 요소는 아주 멀리 떨어져 있습니다.
    2. 그리고 Http 라는 프로토콜을 이용하여 통신하는데, 그 통신은 **비연결성(Connectionless) 무상태(Stateless)**로 이루어집니다.
    👉 **비연결성(Connectionless)**은 서버와 클라이언트가 연결되어 있지 않다는 것 입니다.
    채팅이나 게임 같은 것들을 하지 않는 이상 서버와 클라이언트는 실제로 연결되어 있지 않습니다.
    그 이유는 리소스를 절약하기 위해서 인데, 만약 서버와 클라이언트가 실제로 계속 연결되어있다면 클라이언트는 그렇다고 쳐도, 서버의 비용이 기하급수적으로 늘어나기 때문입니다.
    그래서 서버는 실제로 하나의 요청에 하나의 응답을 내버리고 연결을 끊어버리고있다 라고 생각하시면 좋습니다.
    **무상태(Stateless)**는 서버가 클라이언트의 상태를 저장하지 않는다는 것입니다.
    기존의 상태를 저장하는 것들도 마찬가지로 서버의 비용과 부담을 증가시키는 것 이기 때문에 기존의 상태가 없다고 가정하는 프로토콜을 이용해 구현되어 있습니다.
    실제로 서버는 클라이언트가 직전에, 혹은 그 전에 어떠한 요청을 보냈는지 관심도 없고 전혀 알지 못합니다.
    🤔 아니, 근데 우리가 인터넷 사용할때는 이전의 정보들이 잘 있는것처럼 연속성있게 사용해왔는데요?
    👉 실제로 그렇게 느껴지기 위해서 개발자들이 매우 많은 노력을 기울이고 있습니다!
    예를들어 여러분이 네이버 뉴스탭에 스포츠탭에 특정 기사를 본다고 생각하면
    /News/Sports/9
    와 같이 url을 계층적으로 설계하고, 다음 요청에 대한 api url을 이전 계층에만 둔다면 연속적으로 사용하고 있다고 느끼실 수 있겠죠?
    🤔 그렇다면 인증과 같이, 해당 유저가 인증을 통과했다는 사실은 상태값이 아닌가요?
    👉 그 부분을 지금부터 설명하려고 합니다!
    모든 것들을 이해하실 필요는 없고 어떻게 비연결성, 무상태 프로토콜에서 “유저가 인증되었다”라는 정보를 유지시켜야 한다는 과제를 어떻게 해결했는지 관점에서 보시면 좋을 것 같습니다.

- 인증의 방식
    📌 일반적으로 웹 애플리케이션은 아래 두 가지 방법을 통해서 인증을 처리합니다.
    ### 쿠키-세션 방식의 인증
    📌 쿠키-세션 방식은 서버가 ‘특정 유저가 로그인 되었다’는 상태를 저장하는 방식입니다.
    인증과 관련된 아주 약간의 정보만 서버가 가지고 있게 되고 유저의 이전 상태의 전부는 아니더라도
    인증과 관련된 최소한의 정보는 저장해서 로그인을 유지시킨다는 개념입니다.
    - **아래는 그림의 각 번호에 따른 설명입니다**
        1. 사용자가 로그인 요청을 보냅니다.
        2. 서버는 DB의 유저 테이블을 뒤져서 아이디 비밀번호를 대조해봐야겠죠?
        3. 실제 유저테이블의 정보와 일치한다면 인증을 통과한 것으로 보고 “세션 저장소”에 해당 유저가 로그인 되었다는 정보를 넣습니다.
        4. 세션 저장소에서는 유저의 정보와는 관련 없는 난수인 session-id를 발급합니다.
        5. 서버는 로그인 요청의 응답으로 session-id를 내어줍니다.
        6. 클라이언트는 그 session-id를 쿠키라는 저장소에 보관하고 앞으로의 요청마다 세션아이디를 같이 보냅니다. (주로 HTTP header에 담아서 보냅니다!)
        7. 클라이언트의 요청에서 쿠키를 발견했다면 서버는 세션 저장소에서 쿠키를 검증합니다.
        8. 만약 유저정보를 받아왔다면 이 사용자는 로그인이 되어있는 사용자겠죠?
        9. 이후에는 로그인 된 유저에 따른 응답을 내어줍니다.

    ### JWT 기반 인증
    📌 JWT(JSON Web Token)란 인증에 필요한 정보들을 암호화시킨 토큰을 의미합니다. JWT 기반 인증은 쿠키/세션 방식과 유사하게 JWT 토큰(Access Token)을 HTTP 헤더에 실어 서버가 클라이언트를 식별합니다.
    - **아래는 그림의 각 번호에 따른 설명입니다**
        1. 사용자가 로그인 요청을 보냅니다.
        2. 서버는 DB의 유저 테이블을 뒤져서 아이디 비밀번호를 대조해봐야겠죠?
        3. 실제 유저테이블의 정보와 일치한다면 인증을 통과한 것으로 보고 유저의 정보를 JWT로 암호화 해서 내보냅니다.
        4. 서버는 로그인 요청의 응답으로 jwt 토큰을 내어줍니다.
        5. 클라이언트는 그 토큰을 저장소에 보관하고 앞으로의 요청마다 토큰을 같이 보냅니다.
        6. 클라이언트의 요청에서 토큰을 발견했다면 서버는 토큰을 검증합니다.
        7. 이후에는 로그인 된 유저에 따른 응답을 내어줍니다.

## 04. 쿠키와 세션이란 무엇일까?

- 쿠키와 세션
    👉 쿠키와 세션 모두 HTTP 에 상태 정보를 유지(Stateful)하기 위해 사용됩니다. 즉, 쿠키와 세션을 통해 서버에서는 클라이언트 별로 인증 및 인가를 할 수 있게 됩니다.
    1. **쿠키**
        - 클라이언트에 저장될 목적으로 생성한 작은 정보를 담은 파일 입니다.
        - 클라이언트인 웹 브라우저에 저장된 '쿠키' 를 확인해 보죠.
            - 크롬 브라우저 기준으로 '개발자도구' 를 열어 보세요.
            - Application - Storage - Cookies 에 도메인 별로 저장되어 있는게 확인 됩니다.
        - 구성요소
            - **Name** (이름): 쿠키를 구별하는 데 사용되는 키 (중복될 수 없음)
            - **Value** (값): 쿠키의 값
            - Domain (도메인): 쿠키가 저장된 도메인
            - Path (경로): 쿠키가 사용되는 경로
            - Expires (만료기한): 쿠키의 만료기한 (만료기한 지나면 삭제됩니다.)

    2. **세션**
        - 서버에서 일정시간 동안 클라이언트 상태를 유지하기 위해 사용됩니다.
        - 서버에서 클라이언트 별로 유일무이한 '세션 ID' 를 부여한 후 클라이언트 별 필요한 정보를 서버에 저장합니다.
        - 서버에서 생성한 '세션 ID' 는 클라이언트의 쿠키값('세션 쿠키' 라고 부름)으로 저장되어 클라이언트 식별에 사용됩니다.
        - 세션 동작 방식
    위 그림에서와 같이 서버는 세션ID 를 사용하여 세션을 유지합니다.
    1. 클라이언트가 서버에 1번 요청
    2. 서버가 세션ID 를 생성하고, 쿠키에 담아 응답 헤더에 전달
        1. 세션 ID 형태: "SESSIONID = 12A345"
    3. 클라이언트가 쿠키에 세션ID를 저장 ('세션쿠키')
    4. 클라이언트가 서버에 2번 요청
        - 쿠키값 (세션 ID) 포함하여 요청
    5. 서버가 세션ID 를 확인하고, 1번 요청과 같은 클라이언트임을 인지

- 쿠키 다루기
    - 쿠키 생성

        ```java
        public static void addCookie(String cookieValue, HttpServletResponse res) {
            try {
                cookieValue = URLEncoder.encode(cookieValue, "utf-8").replaceAll("\\+", "%20"); // Cookie Value 에는 공백이 불가능해서 encoding 진행

                Cookie cookie = new Cookie(AUTHORIZATION_HEADER, cookieValue); // Name-Value
                cookie.setPath("/");
                cookie.setMaxAge(30 * 60);

                // Response 객체에 Cookie 추가
                res.addCookie(cookie);
            } catch (UnsupportedEncodingException e) {
                throw new RuntimeException(e.getMessage());
            }
        }
        ```

        - `new Cookie(AUTHORIZATION_HEADER, cookieValue);`
            - Cookie에 저장될 Name과 Value를 생성자로 받는 Cookie 객체를 생성합니다.
        - `setPath("/")`, `setMaxAge(30 * 60)`
            - Path와 만료시간을 지정합니다.
        - HttpServletResponse 객체에 생성한 Cookie 객체를 추가하여 브라우저로 반환합니다.
            - 이렇게 반환된 Cookie는 브라우저의 Cookie 저장소에 저장됩니다.
        - Cookie 생성은 범용적으로 사용될 수 있기 때문에 static 메서드로 선언합니다.

    - 쿠키 읽기

        ```java
        @GetMapping("/get-cookie")
        public String getCookie(@CookieValue(AUTHORIZATION_HEADER) String value) {
            System.out.println("value = " + value);

            return "getCookie : " + value;
        }
        ```

        - `@CookieValue("Cookie의 Name")`
            - Cookie의 Name 정보를 전달해주면 해당 정보를 토대로 Cookie의 Value를 가져옵니다.

    - [코드 스니펫] auth > AuthController

        ```java
        package com.sparta.springauth.auth;

        import jakarta.servlet.http.Cookie;
        import jakarta.servlet.http.HttpServletResponse;
        import org.springframework.web.bind.annotation.CookieValue;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RestController;

        import java.io.UnsupportedEncodingException;
        import java.net.URLEncoder;

        @RestController
        @RequestMapping("/api")
        public class AuthController {

            public static final String AUTHORIZATION_HEADER = "Authorization";

            @GetMapping("/create-cookie")
            public String createCookie(HttpServletResponse res) {
                addCookie("Robbie Auth", res);

                return "createCookie";
            }

            @GetMapping("/get-cookie")
            public String getCookie(@CookieValue(AUTHORIZATION_HEADER) String value) {
                System.out.println("value = " + value);

                return "getCookie : " + value;
            }

            public static void addCookie(String cookieValue, HttpServletResponse res) {
                try {
                    cookieValue = URLEncoder.encode(cookieValue, "utf-8").replaceAll("\\+", "%20"); // Cookie Value 에는 공백이 불가능해서 encoding 진행

                    Cookie cookie = new Cookie(AUTHORIZATION_HEADER, cookieValue); // Name-Value
                    cookie.setPath("/");
                    cookie.setMaxAge(30 * 60);

                    // Response 객체에 Cookie 추가
                    res.addCookie(cookie);
                } catch (UnsupportedEncodingException e) {
                    throw new RuntimeException(e.getMessage());
                }
            }
        }
        ```

- 세션 다루기
    - Servlet에서는 유일무이한 '세션 ID'를 간편하게 만들수 있는 HttpSession을 제공 해줍니다.
    - HttpSession 생성

        ```java
        @GetMapping("/create-session")
        public String createSession(HttpServletRequest req) {
            // 세션이 존재할 경우 세션 반환, 없을 경우 새로운 세션을 생성한 후 반환
            HttpSession session = req.getSession(true);

            // 세션에 저장될 정보 Name - Value 를 추가합니다.
            session.setAttribute(AUTHORIZATION_HEADER, "Robbie Auth");

            return "createSession";
        }
        ```

        - [코드 스니펫] createSession

            ```java
            @GetMapping("/create-session")
            public String createSession(HttpServletRequest req) {
                // 세션이 존재할 경우 세션 반환, 없을 경우 새로운 세션을 생성한 후 반환
                HttpSession session = req.getSession(true);

                // 세션에 저장될 정보 Name - Value 를 추가합니다.
                session.setAttribute(AUTHORIZATION_HEADER, "Robbie Auth");

                return "createSession";
            }
            ```

        - HttpServletRequest를 사용하여 세션을 생성 및 반환할 수 있습니다.
        - `req.getSession(true)`
            - 세션이 존재할 경우 세션을 반환하고 없을 경우 새로운 세션을 생성합니다.
        - 세션에 저장할 정보를 Name-Value 형식으로 추가합니다.
        - 반환된 세션은 브라우저 Cookie 저장소에 ‘JSESSIONID’라는 Name으로 Value에 저장됩니다.

    - HttpSession 읽기

        ```java
        @GetMapping("/get-session")
        public String getSession(HttpServletRequest req) {
            // 세션이 존재할 경우 세션 반환, 없을 경우 null 반환
            HttpSession session = req.getSession(false);

            String value = (String) session.getAttribute(AUTHORIZATION_HEADER); // 가져온 세션에 저장된 Value 를 Name 을 사용하여 가져옵니다.
            System.out.println("value = " + value);

            return "getSession : " + value;
        }
        ```

        - [코드 스니펫] getSession

            ```java
            @GetMapping("/get-session")
            public String getSession(HttpServletRequest req) {
                // 세션이 존재할 경우 세션 반환, 없을 경우 null 반환
                HttpSession session = req.getSession(false);

                String value = (String) session.getAttribute(AUTHORIZATION_HEADER); // 가져온 세션에 저장된 Value 를 Name 을 사용하여 가져옵니다.
                System.out.println("value = " + value);

                return "getSession : " + value;
            }
            ```

        - `req.getSession(false)`
            - 세션이 존재할 경우 세션을 반환하고 없을 경우 null을 반환합니다.
        - `session.getAttribute(”세션에 저장된 정보 Name”)`
            - Name을 사용하여 세션에 저장된 Value를 가져옵니다.