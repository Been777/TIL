# 내일배움캠프 240618 TIL
Java 46일차
My Select Shop 프로젝트(14~16)
-------------------------------------------------------------------------------


# My Select Shop
## 14. My Select Shop 설계
- 프로젝트 생성
    - 프로젝트 준비하기
        1. IntelliJ를 실행합니다.
        2. New Project를 클릭합니다.
        3. 왼쪽 메뉴에서 "Spring Initializr”를 클릭하고 아래와 같이 설정합니다.
        4.  🚒**[중요] 꼭 다음 사항을 확인해주세요.** 
            - Name: myselectshop
            - **Language: Java**
            - **Build system: Gradle - Groovy**
            - Group: com.sparta
            - **JDK: 17**
            - 프로젝트 경로(Location)는 자유롭게 설정하시면 됩니다.
        5. Next를 클릭합니다.
        6. Dependencies를 아래 사진과 같이 추가해주고 Create를 클릭합니다.

    - 프로젝트 설정추가
        - build.gradle
            - [코드 스니펫] JWT, json
                
                ```groovy
                // JWT
                compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
                runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
                runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
                
                // json
                implementation 'org.json:json:20230227'
                ```
                
            - Spring-Security는 잠시 주석 처리합니다.
        - src > main > resources > application.properties
            - [코드 스니펫] application.properties
                
                ```xml
                spring.datasource.url=jdbc:mysql://localhost:3306/shop
                spring.datasource.username=root
                spring.datasource.password={비밀번호}
                spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
                
                spring.jpa.hibernate.ddl-auto=update
                
                spring.jpa.properties.hibernate.show_sql=true
                spring.jpa.properties.hibernate.format_sql=true
                spring.jpa.properties.hibernate.use_sql_comments=true
                
                jwt.secret.key=7Iqk7YyM66W07YOA7L2U65Sp7YG065+9U3ByaW5n6rCV7J2Y7Yqc7YSw7LWc7JuQ67mI7J6F64uI64ukLg==
                ```
                
        - Intellij Database 연동
            - CREATE DATABASE
                
                ```sql
                CREATE DATABASE shop;
                ```
                
            - 연동 순서
                1. Database 탭을 클릭하시고 + 버튼을 누릅니다.
                2. Data Source > MySQL 를 클릭합니다.
                3. User, Password, Database 정보를 추가한 후 Ok를 클릭합니다.
                4. MySQL Database에 연결이 완료되었습니다.

        - 페이지 Controller
            - [코드 스니펫] HomeController
                
                ```java
                package com.sparta.myselectshop.controller;
                
                import org.springframework.stereotype.Controller;
                import org.springframework.web.bind.annotation.GetMapping;
                
                @Controller
                public class HomeController {
                    @GetMapping("/")
                    public String home() {
                        return "index";
                    }
                }
                ```        
            
    - 시작코드
        👉 src > main > resources > templates 에 아래 html 파일의 코드스니펫을 사용하여 추가 해주세요.
        (혹시 없다면 만들어주세요.)

        - **[코드 스니펫] index.html**
            
            ```html
            <!doctype html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport"
                      content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
                <meta http-equiv="X-UA-Compatible" content="ie=edge">
            		<link rel="preconnect" href="https://fonts.gstatic.com">
            
                <link rel="stylesheet" href="/css/style.css">
                <script src="https://code.jquery.com/jquery-3.7.0.min.js"
                        integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous"></script>
                <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.5/dist/js.cookie.min.js"></script>
                <script src="/js/basic.js"></script>
                <title>나만의 셀렉샵</title>
            </head>
            <body>
            <div class="header" style="position:relative;">
                <!--headr-->
                <div id="header-title-select-shop">
                    My Select Shop
                </div>
                <!--/headr-->
            </div>
            <div class="nav">
                <div class="nav-see active">
                    모아보기
                </div>
                <div class="nav-search">
                    탐색하기
                </div>
            </div>
            <div id="see-area">
                <div id="product-container">
            
                </div>
            </div>
            <div id="search-area">
                <div>
                    <input type="text" id="query">
                </div>
                <div id="search-result-box">
            
                </div>
                <div id="container" class="popup-container">
                    <div class="popup">
                        <button id="close" class="close">
                            X
                        </button>
                        <h1>⏰최저가 설정하기</h1>
                        <p>최저가를 설정해두면 선택하신 상품의 최저가가 떴을 때<br/> 표시해드려요!</p>
                        <div>
                            <input type="text" id="myprice" placeholder="200,000">원
                        </div>
                        <button class="cta" onclick="setMyprice()">설정하기</button>
                    </div>
                </div>
            </div>
            </body>
            </html>
            ```

        👉 src > main > resources > static 에 css, js 폴더를 만들고, 아래 css, js 파일을 넣어주세요.

        - css
            - **[코드 스니펫] style.css**
                
                ```css
                * {
                    font-family: 'Georgia', serif;
                }
                
                body {
                    margin: 0px;
                }
                
                #search-result-box {
                    margin-top: 15px;
                }
                
                .search-itemDto {
                    width: 530px;
                    display: flex;
                    flex-direction: row;
                    align-content: center;
                    justify-content: space-around;
                }
                
                .search-itemDto-left img {
                    width: 159px;
                    height: 159px;
                }
                
                .search-itemDto-center {
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                    justify-content: space-evenly;
                }
                
                .search-itemDto-center div {
                    width: 280px;
                    height: 23px;
                    font-size: 18px;
                    font-weight: normal;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1.3;
                    letter-spacing: -0.9px;
                    text-align: left;
                    color: #343a40;
                    overflow: hidden;
                    white-space: nowrap;
                    text-overflow: ellipsis;
                }
                
                .search-itemDto-center div.price {
                    height: 27px;
                    font-size: 27px;
                    font-weight: 600;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.54px;
                    text-align: left;
                    color: #E8344E;
                }
                
                .search-itemDto-center span.unit {
                    width: 17px;
                    height: 18px;
                    font-size: 18px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.9px;
                    text-align: center;
                    color: #000000;
                }
                
                .search-itemDto-right {
                    display: inline-block;
                    height: 100%;
                    vertical-align: middle
                }
                
                .search-itemDto-right img {
                    height: 25px;
                    width: 25px;
                    vertical-align: middle;
                    margin-top: 60px;
                    cursor: pointer;
                }
                
                input#query {
                    padding: 15px;
                    width: 526px;
                    border-radius: 2px;
                    background-color: #e9ecef;
                    border: none;
                
                    background-image: url('../images/icon-search.png');
                    background-repeat: no-repeat;
                    background-position: right 10px center;
                    background-size: 20px 20px;
                }
                
                input#query::placeholder {
                    padding: 15px;
                }
                
                button {
                    color: white;
                    border-radius: 4px;
                    border-radius: none;
                }
                
                .popup-container {
                    display: none;
                    position: fixed;
                    top: 0;
                    left: 0;
                    bottom: 0;
                    right: 0;
                    background-color: rgba(0, 0, 0, 0.5);
                    align-items: center;
                    justify-content: center;
                }
                
                .popup-container.active {
                    display: flex;
                }
                
                .popup {
                    padding: 20px;
                    box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
                    position: relative;
                    width: 370px;
                    height: 209px;
                    border-radius: 11px;
                    background-color: #ffffff;
                }
                
                .popup h1 {
                    margin: 0px;
                    font-size: 22px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -1.1px;
                    color: #000000;
                }
                
                .popup input {
                    width: 320px;
                    height: 22px;
                    border-radius: 2px;
                    border: solid 1.1px #dee2e6;
                    margin-right: 9px;
                    margin-bottom: 10px;
                    padding-left: 10px;
                }
                
                .add-folder-btn {
                    width: 330px;
                }
                
                .popup button.close {
                    position: absolute;
                    top: 15px;
                    right: 15px;
                    color: #adb5bd;
                    background-color: #fff;
                    font-size: 19px;
                    border: none;
                }
                
                .popup button.cta {
                    width: 369.1px;
                    height: 43.9px;
                    border-radius: 2px;
                    background-color: #15aabf;
                    border: none;
                }
                
                .popup button.cta2 {
                    width: 352.1px;
                    height: 43.9px;
                    border-radius: 2px;
                    background-color: #15aabf;
                    border: none;
                }
                
                #search-area, #see-area {
                    width: 530px;
                    margin: auto;
                }
                
                .nav {
                    width: 530px;
                    margin: 30px auto;
                    display: flex;
                    align-items: center;
                    justify-content: space-around;
                }
                
                .nav div {
                    cursor: pointer;
                }
                
                .nav div.active {
                    font-weight: 700;
                }
                
                .header {
                    height: 255px;
                    box-sizing: border-box;
                    background-color: #15aabf;
                    color: white;
                    text-align: center;
                    padding-top: 80px;
                    /*padding: 50px;*/
                    font-size: 45px;
                    font-weight: bold;
                }
                
                #header-title-login-user {
                    font-size: 36px;
                    letter-spacing: -1.08px;
                }
                
                #header-title-select-shop {
                    margin-top: 20px;
                    font-size: 45px;
                    letter-spacing: 1.1px;
                }
                
                #product-container {
                    grid-template-columns: 100px 50px 100px;
                    grid-template-rows: 80px auto 80px;
                    column-gap: 10px;
                    row-gap: 15px;
                }
                
                .product-card {
                    width: 300px;
                    margin: auto;
                    cursor: pointer;
                }
                
                .product-card .card-header {
                    width: 300px;
                }
                
                .product-card .card-header img {
                    width: 300px;
                }
                
                .product-card .card-body {
                    margin-top: 15px;
                }
                
                .product-card .card-body .title {
                    font-size: 11px;
                    font-weight: normal;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.75px;
                    text-align: left;
                    color: #343a40;
                    margin-bottom: 10px;
                    overflow: hidden;
                    white-space: nowrap;
                    text-overflow: ellipsis;
                }
                
                .product-card .card-body .lprice {
                    font-size: 15.8px;
                    font-weight: normal;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.79px;
                    color: #000000;
                    margin-bottom: 10px;
                }
                
                .product-card .card-body .lprice span {
                    font-size: 13.4px;
                    font-weight: 600;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.43px;
                    text-align: left;
                    color: #E8344E;
                }
                
                .product-card .card-body .isgood {
                    margin-top: 10px;
                    padding: 10px 20px;
                    color: white;
                    border-radius: 2.6px;
                    background-color: #ff8787;
                    width: 48px;
                }
                
                .pagination {
                    font-size: 14px;
                    margin-top: 12px;
                    margin-left: auto;
                    margin-right: auto;
                    width: 65%;
                }
                
                .folder-active {
                    background-color: crimson !important;;
                }
                
                .none {
                    display: none;
                }
                
                .folder-bar {
                    width: 100%;
                    overflow: hidden;
                }
                
                .folder-black, .folder-black:hover {
                    color: #fff!important;
                    background-color: #000!important;
                }
                
                .folder-bar .folder-button {
                    white-space: normal;
                }
                .folder-bar .folder-bar-item {
                    font-size: 17px;
                    padding: 8px 16px;
                    float: left;
                    width: auto;
                    border: none;
                    display: block;
                    outline: 0;
                }
                
                .folder-btn, .folder-button {
                    border: none;
                    display: inline-block;
                    padding: 8px 16px;
                    vertical-align: middle;
                    overflow: hidden;
                    text-decoration: none;
                    color: inherit;
                    background-color: inherit;
                    text-align: center;
                    cursor: pointer;
                    white-space: nowrap;
                }
                
                #login-form {
                    width: 538px;
                    height: 710px;
                    margin: 70px auto 141px auto;
                    display: flex;
                    flex-direction: column;
                    justify-content: flex-start;
                    align-items: center;
                    /*gap: 96px;*/
                    padding: 56px 0 0;
                    border-radius: 10px;
                    box-shadow: 0 4px 25px 0 rgba(0, 0, 0, 0.15);
                    background-color: #ffffff;
                }
                
                #login-title {
                    width: 303px;
                    height: 32px;
                    /*margin: 56px auto auto auto;*/
                    flex-grow: 0;
                    font-family: SpoqaHanSansNeo;
                    font-size: 32px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.96px;
                    text-align: left;
                    color: #212529;
                }
                
                #login-kakao-btn {
                    border-width: 0;
                    margin: 96px 0 8px;
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    /*margin: 0 0 8px;*/
                    padding: 11px 12px;
                    border-radius: 5px;
                    background-color: #ffd43b;
                
                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    color: #414141;
                }
                
                #login-id-btn {
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    /*margin: 8px 0 0;*/
                    padding: 11px 12px;
                    border-radius: 5px;
                    border: solid 1px #212529;
                    background-color: #ffffff;
                
                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    color: #414141;
                }
                
                .login-input-box {
                    border-width: 0;
                
                    width: 370px !important;
                    height: 52px;
                    margin: 14px 0 0;
                    border-radius: 5px;
                    background-color: #e9ecef;
                }
                
                .login-id-label {
                    /*width: 44.1px;*/
                    /*height: 16px;*/
                    width: 382px;
                    padding-left: 11px;
                    margin-top: 40px;
                    /*margin: 0 337.9px 14px 11px;*/
                    font-family: NotoSansCJKKR;
                    font-size: 16px;
                    font-weight: normal;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: -0.8px;
                    text-align: left;
                    color: #212529;
                }
                
                #login-id-submit {
                    border-width: 0;
                    width: 393px;
                    height: 62px;
                    flex-grow: 0;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    align-items: center;
                    gap: 10px;
                    margin: 40px 0 0;
                    padding: 11px 12px;
                    border-radius: 5px;
                    background-color: #15aabf;
                
                    font-family: SpoqaHanSansNeo;
                    font-size: 20px;
                    font-weight: bold;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: normal;
                    text-align: center;
                    color: #ffffff;
                }
                
                #sign-text {
                    position:absolute;
                    top:48px;
                    right:110px;
                    font-size: 18px;
                    font-family: SpoqaHanSansNeo;
                    font-size: 18px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: 0.36px;
                    text-align: center;
                    color: #ffffff;
                }
                
                #login-text {
                    position:absolute;
                    top:48px;
                    right:50px;
                    font-size: 18px;
                    font-family: SpoqaHanSansNeo;
                    font-size: 18px;
                    font-weight: 500;
                    font-stretch: normal;
                    font-style: normal;
                    line-height: 1;
                    letter-spacing: 0.36px;
                    text-align: center;
                    color: #ffffff;
                }
                
                @media ( max-width: 768px ) {
                    body {
                        margin: 0px;
                    }
                
                    #search-result-box {
                        margin-top: 15px;
                    }
                
                    .search-itemDto {
                        width: 330px;
                        display: flex;
                        flex-direction: row;
                        align-content: center;
                        justify-content: space-around;
                    }
                
                    .search-itemDto-left img {
                        width: 80px;
                        height: 80px;
                    }
                
                    .search-itemDto-center {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        justify-content: space-evenly;
                    }
                
                    .search-itemDto-center div {
                        width: 190px;
                        height: 23px;
                        font-size: 13px;
                        font-weight: normal;
                        font-stretch: normal;
                        font-style: normal;
                        line-height: 1.3;
                        letter-spacing: -0.9px;
                        text-align: left;
                        color: #343a40;
                        overflow: hidden;
                        white-space: nowrap;
                        text-overflow: ellipsis;
                    }
                
                    .search-itemDto-center div.price {
                        height: 27px;
                        font-size: 17px;
                        font-weight: 600;
                        font-stretch: normal;
                        font-style: normal;
                        line-height: 1;
                        letter-spacing: -0.54px;
                        text-align: left;
                        color: #E8344E;
                    }
                
                    .search-itemDto-center span.unit {
                        width: 17px;
                        height: 18px;
                        font-size: 14px;
                        font-weight: 500;
                        font-stretch: normal;
                        font-style: normal;
                        line-height: 1;
                        letter-spacing: -0.9px;
                        text-align: center;
                        color: #000000;
                    }
                
                    .search-itemDto-right {
                        display: inline-block;
                        height: 100%;
                        vertical-align: middle
                    }
                
                    .search-itemDto-right img {
                        height: 14px;
                        width: 14px;
                        vertical-align: middle;
                        margin-top: 26px;
                        cursor: pointer;
                        padding-right: 20px;
                    }
                
                    input#query {
                        padding: 15px;
                        width: 290px;
                        border-radius: 2px;
                        background-color: #e9ecef;
                        border: none;
                
                        background-image: url('../images/icon-search.png');
                        background-repeat: no-repeat;
                        background-position: right 10px center;
                        background-size: 20px 20px;
                    }
                
                    input#query::placeholder {
                        padding: 15px;
                    }
                
                    button {
                        color: white;
                        border-radius: 4px;
                        border-radius: none;
                    }
                
                    .popup-container {
                        display: none;
                        position: fixed;
                        top: 0;
                        left: 0;
                        bottom: 0;
                        right: 0;
                        background-color: rgba(0, 0, 0, 0.5);
                        align-items: center;
                        justify-content: center;
                    }
                
                    .popup-container.active {
                        display: flex;
                    }
                
                    .popup {
                        position: absolute;
                        bottom: 0px;
                        width: 333px;
                        border-radius: 11px 11px 0px 0px;
                    }
                
                    .popup input {
                        width: 278px !important;
                        height: 39px;
                        border-radius: 2px;
                        border: solid 1.1px #dee2e6;
                        margin-right: 9px;
                        margin-bottom: 10px;
                        padding-left: 10px;
                    }
                
                    .popup p {
                        font-size: 14px;
                    }
                
                    .popup button.close {
                        position: absolute;
                        top: 15px;
                        right: 15px;
                        color: #adb5bd;
                        background-color: #fff;
                        font-size: 19px;
                        border: none;
                    }
                
                    .popup button.cta {
                        width: 319px;
                        height: 43.9px;
                        border-radius: 2px;
                        background-color: #15aabf;
                        border: none;
                    }
                
                    .popup button.cta2 {
                        width: 302.1px;
                        height: 43.9px;
                        border-radius: 2px;
                        background-color: #15aabf;
                        border: none;
                    }
                
                    #search-area, #see-area {
                        width: 330px;
                        margin: auto;
                    }
                
                    .nav {
                        width: 330px;
                        margin: 30px auto;
                        display: flex;
                        align-items: center;
                        justify-content: space-around;
                    }
                
                    .nav div {
                        cursor: pointer;
                    }
                
                    .nav div.active {
                        font-weight: 700;
                    }
                
                    .header {
                        height: 255px;
                        box-sizing: border-box;
                        background-color: #15aabf;
                        color: white;
                        text-align: center;
                        padding-top: 80px;
                        /*padding: 50px;*/
                        font-size: 45px;
                        font-weight: bold;
                    }
                
                    .none {
                        display: none;
                    }
                
                    input#kakao-login {
                        padding: 15px;
                        width: 526px;
                        border-radius: 2px;
                        background-color: #e9ecef;
                        border: none;
                
                        background-repeat: no-repeat;
                        background-position: right 10px center;
                        background-size: 20px 20px;
                    }
                }
                
                .autocomplete {
                    /*the container must be positioned relative:*/
                    position: relative;
                    display: inline-block;
                }
                
                input {
                    border: 1px solid transparent;
                    background-color: #f1f1f1;
                    padding: 10px;
                    font-size: 16px;
                }
                
                input[type=text] {
                    background-color: #f1f1f1;
                    /*width: 100%;*/
                }
                
                input[type=password] {
                    background-color: #f1f1f1;
                    /*width: 100%;*/
                }
                input[type=submit] {
                    background-color: DodgerBlue;
                    color: #fff;
                }
                .autocomplete-items {
                    position: absolute;
                    border: 1px solid #d4d4d4;
                    border-bottom: none;
                    border-top: none;
                    z-index: 99;
                    /*position the autocomplete items to be the same width as the container:*/
                    top: 100%;
                    left: 0;
                    right: 0;
                }
                .autocomplete-items div {
                    padding: 10px;
                    cursor: pointer;
                    background-color: #fff;
                    border-bottom: 1px solid #d4d4d4;
                }
                .autocomplete-items div:hover {
                    /*when hovering an item:*/
                    background-color: #e9e9e9;
                }
                .autocomplete-active {
                    /*when navigating through the items using the arrow keys:*/
                    background-color: DodgerBlue !important;
                    color: #ffffff;
                }
                
                .alert-danger {
                    color: #721c24;
                    background-color: #f8d7da;
                    border-color: #f5c6cb;
                }
                
                .alert {
                    width: 300px;
                    margin-top: 22px;
                    padding: 1.75rem 1.25rem;
                    border: 1px solid transparent;
                    border-radius: .25rem;
                }
                ```
                
        - images
            - **[코드 스니펫] 저장 아이콘 (icon-save.png)**
                
                ```java
                https://s3.ap-northeast-2.amazonaws.com/materials.spartacodingclub.kr/spring/week04/icon-save.png
                ```
                
            - **[코드 스니펫] 검색 아이콘 (icon-search.png)**
                
                ```java
                https://s3.ap-northeast-2.amazonaws.com/materials.spartacodingclub.kr/spring/week04/icon-search.png
                ```
                
        - js
            - **[코드 스니펫] basic.js**
                
                ```jsx
                const host = 'http://' + window.location.host;
                let targetId;
                
                $(document).ready(function () {
                
                    showProduct();
                
                    // id 가 query 인 녀석 위에서 엔터를 누르면 execSearch() 함수를 실행하라는 뜻입니다.
                    $('#query').on('keypress', function (e) {
                        if (e.key == 'Enter') {
                            execSearch();
                        }
                    });
                    $('#close').on('click', function () {
                        $('#container').removeClass('active');
                    })
                    $('#close2').on('click', function () {
                        $('#container2').removeClass('active');
                    })
                    $('.nav div.nav-see').on('click', function () {
                        $('div.nav-see').addClass('active');
                        $('div.nav-search').removeClass('active');
                
                        $('#see-area').show();
                        $('#search-area').hide();
                    })
                    $('.nav div.nav-search').on('click', function () {
                        $('div.nav-see').removeClass('active');
                        $('div.nav-search').addClass('active');
                
                        $('#see-area').hide();
                        $('#search-area').show();
                    })
                
                    $('#see-area').show();
                    $('#search-area').hide();
                })
                
                function numberWithCommas(x) {
                    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                }
                
                function execSearch() {
                    /**
                     * 검색어 input id: query
                     * 검색결과 목록: #search-result-box
                     * 검색결과 HTML 만드는 함수: addHTML
                     */
                        // 1. 검색창의 입력값을 가져온다.
                    let query = $('#query').val();
                
                    // 2. 검색창 입력값을 검사하고, 입력하지 않았을 경우 focus.
                    if (query == '') {
                        alert('검색어를 입력해주세요');
                        $('#query').focus();
                        return;
                    }
                    // 3. GET /api/search?query=${query} 요청
                    $.ajax({
                        type: 'GET',
                        url: `/api/search?query=${query}`,
                        success: function (response) {
                            $('#search-result-box').empty();
                            // 4. for 문마다 itemDto를 꺼내서 HTML 만들고 검색결과 목록에 붙이기!
                            for (let i = 0; i < response.length; i++) {
                                let itemDto = response[i];
                                let tempHtml = addHTML(itemDto);
                                $('#search-result-box').append(tempHtml);
                            }
                        },
                        error(error, status, request) {
                            console.error(error);
                        }
                    })
                
                }
                
                function addHTML(itemDto) {
                    /**
                     * class="search-itemDto" 인 녀석에서
                     * image, title, lprice, addProduct 활용하기
                     * 참고) onclick='addProduct(${JSON.stringify(itemDto)})'
                     */
                    return `<div class="search-itemDto">
                        <div class="search-itemDto-left">
                            <img src="${itemDto.image}" alt="">
                        </div>
                        <div class="search-itemDto-center">
                            <div>${itemDto.title}</div>
                            <div class="price">
                                ${numberWithCommas(itemDto.lprice)}
                                <span class="unit">원</span>
                            </div>
                        </div>
                        <div class="search-itemDto-right">
                            <img src="../images/icon-save.png" alt="" onclick='addProduct(${JSON.stringify(itemDto)})'>
                        </div>
                    </div>`
                }
                
                function addProduct(itemDto) {
                    /**
                     * modal 뜨게 하는 법: $('#container').addClass('active');
                     * data를 ajax로 전달할 때는 두 가지가 매우 중요
                     * 1. contentType: "application/json",
                     * 2. data: JSON.stringify(itemDto),
                     */
                
                    // 1. POST /api/products 에 관심 상품 생성 요청
                    $.ajax({
                        type: 'POST',
                        url: '/api/products',
                        contentType: 'application/json',
                        data: JSON.stringify(itemDto),
                        success: function (response) {
                            // 2. 응답 함수에서 modal을 뜨게 하고, targetId 를 reponse.id 로 설정
                            $('#container').addClass('active');
                            targetId = response.id;
                        },
                        error(error, status, request) {
                            console.log(error);
                        }
                    });
                }
                function showProduct(isAdmin = false) {
                    /**
                     * 관심상품 목록: #product-container
                     * 검색결과 목록: #search-result-box
                     * 관심상품 HTML 만드는 함수: addProductItem
                     */
                
                    $.ajax({
                        type: 'GET',
                        url: '/api/products',
                        contentType: 'application/json',
                        success: function (response) {
                            $('#product-container').empty();
                            for (let i = 0; i < response.length; i++) {
                                let product = response[i];
                                let tempHtml = addProductItem(product);
                                $('#product-container').append(tempHtml);
                            }
                        },
                        error(error, status, request) {
                						console.log(error);
                        }
                    });
                
                }
                
                function addProductItem(product) {
                    console.log(product)
                    return `<div class="product-card">
                                <div onclick="window.location.href='${product.link}'">
                                    <div class="card-header">
                                        <img src="${product.image}"
                                             alt="">
                                    </div>
                                    <div class="card-body">
                                        <div class="title">
                                            ${product.title}
                                        </div>
                                        <div class="lprice">
                                            <span>${numberWithCommas(product.lprice)}</span>원
                                        </div>
                                        <div class="isgood ${product.lprice > product.myprice ? 'none' : ''}">
                                            최저가
                                        </div>
                                    </div>
                                </div>
                            </div>`;
                }
                
                function setMyprice() {
                    /**
                     * 1. id가 myprice 인 input 태그에서 값을 가져온다.
                     * 2. 만약 값을 입력하지 않았으면 alert를 띄우고 중단한다.
                     * 3. PUT /api/product/${targetId} 에 data를 전달한다.
                     *    주의) contentType: "application/json",
                     *         data: JSON.stringify({myprice: myprice}),
                     *         빠뜨리지 말 것!
                     * 4. 모달을 종료한다. $('#container').removeClass('active');
                     * 5, 성공적으로 등록되었음을 알리는 alert를 띄운다.
                     * 6. 창을 새로고침한다. window.location.reload();
                     */
                        // 1. id가 myprice 인 input 태그에서 값을 가져온다.
                    let myprice = $('#myprice').val();
                    // 2. 만약 값을 입력하지 않았으면 alert를 띄우고 중단한다.
                    if (myprice == '') {
                        alert('올바른 가격을 입력해주세요');
                        return;
                    }
                
                    // 3. PUT /api/product/${targetId} 에 data를 전달한다.
                    $.ajax({
                        type: 'PUT',
                        url: `/api/products/${targetId}`,
                        contentType: 'application/json',
                        data: JSON.stringify({myprice: myprice}),
                        success: function (response) {
                
                            // 4. 모달을 종료한다. $('#container').removeClass('active');
                            $('#container').removeClass('active');
                            // 5. 성공적으로 등록되었음을 알리는 alert를 띄운다.
                            alert('성공적으로 등록되었습니다.');
                            // 6. 창을 새로고침한다. window.location.reload();
                            window.location.reload();
                        },
                        error(error, status, request) {
                            console.error(error);
                        }
                    })
                }
                ```
                
- 상품 검색 API 구현 및 확인
    
    [제목 없는 데이터베이스](https://www.notion.so/97767488f57a495886d2fcd66fd8e776?pvs=21)
    - **[코드 스니펫] naver > controller > NaverApiController**
        
        ```java
        package com.sparta.myselectshop.naver.controller;
        
        import com.sparta.myselectshop.naver.dto.ItemDto;
        import com.sparta.myselectshop.naver.service.NaverApiService;
        import lombok.RequiredArgsConstructor;
        import org.springframework.web.bind.annotation.GetMapping;
        import org.springframework.web.bind.annotation.RequestMapping;
        import org.springframework.web.bind.annotation.RequestParam;
        import org.springframework.web.bind.annotation.RestController;
        
        import java.util.List;
        
        @RestController
        @RequiredArgsConstructor
        @RequestMapping("/api")
        public class NaverApiController {
        
            private final NaverApiService naverApiService;
        
            @GetMapping("/search")
            public List<ItemDto> searchItems(@RequestParam String query)  {
                return naverApiService.searchItems(query);
            }
        }
        ```
        
    - **[코드 스니펫] naver > dto > ItemDto**
        
        ```java
        package com.sparta.myselectshop.naver.dto;
        
        import lombok.Getter;
        import lombok.NoArgsConstructor;
        import org.json.JSONObject;
        
        @Getter
        @NoArgsConstructor
        public class ItemDto {
            private String title;
            private String link;
            private String image;
            private int lprice;
        
            public ItemDto(JSONObject itemJson) {
                this.title = itemJson.getString("title");
                this.link = itemJson.getString("link");
                this.image = itemJson.getString("image");
                this.lprice = itemJson.getInt("lprice");
            }
        }
        ```
        
    - **[코드 스니펫] naver > service > NaverApiService**
        
        ```java
        package com.sparta.myselectshop.naver.service;
        
        import com.sparta.myselectshop.naver.dto.ItemDto;
        import lombok.extern.slf4j.Slf4j;
        import org.json.JSONArray;
        import org.json.JSONObject;
        import org.springframework.boot.web.client.RestTemplateBuilder;
        import org.springframework.http.RequestEntity;
        import org.springframework.http.ResponseEntity;
        import org.springframework.stereotype.Service;
        import org.springframework.web.client.RestTemplate;
        import org.springframework.web.util.UriComponentsBuilder;
        
        import java.net.URI;
        import java.util.ArrayList;
        import java.util.List;
        
        @Slf4j(topic = "NAVER API")
        @Service
        public class NaverApiService {
        
            private final RestTemplate restTemplate;
        
            public NaverApiService(RestTemplateBuilder builder) {
                this.restTemplate = builder.build();
            }
        
            public List<ItemDto> searchItems(String query) {
                // 요청 URL 만들기
                URI uri = UriComponentsBuilder
                        .fromUriString("https://openapi.naver.com")
                        .path("/v1/search/shop.json")
                        .queryParam("display", 15)
                        .queryParam("query", query)
                        .encode()
                        .build()
                        .toUri();
                log.info("uri = " + uri);
        
                RequestEntity<Void> requestEntity = RequestEntity
                        .get(uri)
                        .header("X-Naver-Client-Id", "{Client-Id}")
                        .header("X-Naver-Client-Secret", "{Client-Secret}")
                        .build();
        
                ResponseEntity<String> responseEntity = restTemplate.exchange(requestEntity, String.class);
        
                log.info("NAVER API Status Code : " + responseEntity.getStatusCode());
        
                return fromJSONtoItems(responseEntity.getBody());
            }
        
            public List<ItemDto> fromJSONtoItems(String responseEntity) {
                JSONObject jsonObject = new JSONObject(responseEntity);
                JSONArray items  = jsonObject.getJSONArray("items");
                List<ItemDto> itemDtoList = new ArrayList<>();
        
                for (Object item : items) {
                    ItemDto itemDto = new ItemDto((JSONObject) item);
                    itemDtoList.add(itemDto);
                }
        
                return itemDtoList;
            }
        }
        ```
        
- 요구사항 파악
    1. 키워드로 상품의 정보 검색
        1. 네이버 쇼핑 API 이용
        2. 상품 이름 (title), 링크 URL (link),  이미지 URL (image), 최저가 (lprice)
    2. 관심 상품 등록하기
        1.  DB 에 상품정보 입력 (Insert)
            1. 상품 이름 (title), 링크 URL (link),  이미지 URL (image), 최저가 (lprice)
            2. 희망 최저가 (myprice) → 0원으로 설정
    3. 관심 상품의 "희망 최저가" 설정하기
        1. DB 업데이트 (Update)
            1. 등록된 관심상품의 "희망 최저가" (myprice) 만 업데이트
    4. 관심 상품 조회하기
        1. DB 조회 (Select)
            1. 등록된 모든 관심상품 정보 조회
        2. UI 에 '최저가' 표시 조건
            1. 희망하는 최저가보다 실제 최저가가 낮은 경우
            
- API 설계하기  
    [제목 없는 데이터베이스](https://www.notion.so/5b81a7a120724ee787376b003ac21cb1?pvs=21)
    
## 15. 관심상품 API 구현

- 관심상품 등록 API
    ![Untitled (6).png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7ca260bd-c8d1-480c-a4de-c3d25d079ebb/Untitled_(6).png)
    1. DB 상품 테이블에 대응되는 Entity
        - **[코드 스니펫] entity > Product**
            
            ```java
            package com.sparta.myselectshop.entity;
            
            import com.sparta.myselectshop.dto.ProductRequestDto;
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.NoArgsConstructor;
            import lombok.Setter;
            
            @Entity // JPA가 관리할 수 있는 Entity 클래스 지정
            @Getter
            @Setter
            @Table(name = "product") // 매핑할 테이블의 이름을 지정
            @NoArgsConstructor
            public class Product extends Timestamped {
            
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
            
                @Column(nullable = false)
                private String title;
            
                @Column(nullable = false)
                private String image;
            
                @Column(nullable = false)
                private String link;
            
                @Column(nullable = false)
                private int lprice;
            
                @Column(nullable = false)
                private int myprice;
            
                public Product(ProductRequestDto requestDto) {
                    this.title = requestDto.getTitle();
                    this.image = requestDto.getImage();
                    this.link = requestDto.getLink();
                    this.lprice = requestDto.getLprice();
                }
            }
            ```
            
        - **[코드 스니펫] entity > Timestamped**
            
            ```java
            package com.sparta.myselectshop.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import org.springframework.data.annotation.CreatedDate;
            import org.springframework.data.annotation.LastModifiedDate;
            import org.springframework.data.jpa.domain.support.AuditingEntityListener;
            
            import java.time.LocalDateTime;
            
            @Getter
            @MappedSuperclass
            @EntityListeners(AuditingEntityListener.class)
            public abstract class Timestamped {
            
                @CreatedDate
                @Column(updatable = false)
                @Temporal(TemporalType.TIMESTAMP)
                private LocalDateTime createdAt;
            
                @LastModifiedDate
                @Column
                @Temporal(TemporalType.TIMESTAMP)
                private LocalDateTime modifiedAt;
            }
            ```
            
    2. 요청 받기 및 응답 보내기 (Controller)
        
        ```java
        // 관심 상품 등록하기
        @PostMapping("/products")
        public ProductResponseDto createProduct(@RequestBody ProductRequestDto requestDto) {
            // 응답 보내기
            return productService.createProduct(requestDto);
        }
        ```
        
    3. 관심상품 등록 요청 DTO
        - **[코드 스니펫] ProductRequestDto**
            
            ```java
            package com.sparta.myselectshop.dto;
            
            import lombok.AllArgsConstructor;
            import lombok.Getter;
            import lombok.NoArgsConstructor;
            
            @Getter
            @NoArgsConstructor
            @AllArgsConstructor
            public class ProductRequestDto {
                // 관심상품명
                private String title;
                // 관심상품 썸네일 image URL
                private String image;
                // 관심상품 구매링크 URL
                private String link;
                // 관심상품의 최저가
                private int lprice;
            }
            ```
            
    4. 관심상품 등록 응답 DTO
        - **[코드 스니펫] ProductResponseDto**
            
            ```java
            package com.sparta.myselectshop.dto;
            
            import com.sparta.myselectshop.entity.Product;
            import lombok.Getter;
            import lombok.NoArgsConstructor;
            
            @Getter
            @NoArgsConstructor
            public class ProductResponseDto {
                private Long id;
                private String title;
                private String link;
                private String image;
                private int lprice;
                private int myprice;
            
                public ProductResponseDto(Product product) {
                    this.id = product.getId();
                    this.title = product.getTitle();
                    this.link = product.getLink();
                    this.image = product.getImage();
                    this.lprice = product.getLprice();
                    this.myprice = product.getMyprice();
                }
            }
            ```
            
    5. Entity 객체 생성 및 DB 저장 (Service)
        
        ```java
        public ProductResponseDto createProduct(ProductRequestDto requestDto) {
            Product product = productRepository.save(new Product(requestDto));
            return new ProductResponseDto(product);
        }
        ```
        
- 관심상품 희망 최저가 업데이트 API
    ![Untitled (7).png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8c8aaf6e-bf9d-4aeb-9d3b-becd949f4b50/Untitled_(7).png)
    1. 요청 받기 및 응답 보내기 (Controller)
        
        ```java
        // 관심 상품 희망 최저가 등록하기
        @PutMapping("/products/{id}")
        public ProductResponseDto updateProduct(@PathVariable Long id, @RequestBody ProductMypriceRequestDto requestDto) {
            // 응답 보내기
            return productService.updateProduct(id, requestDto);
        }
        ```
        
    2. 관심상품 희망 최저가 업데이트 요청 DTO
        - **[코드 스니펫] ProductMypriceRequestDto**
            
            ```java
            package com.sparta.myselectshop.dto;
            
            import lombok.Getter;
            import lombok.Setter;
            
            @Getter
            @Setter
            public class ProductMypriceRequestDto {
                private int myprice;
            }
            ```
            
    3. DB 조회 및 수정 (Service)
        
        ```java
        public static final int MIN_MY_PRICE = 100;
        ...
        @Transactional
        public ProductResponseDto updateProduct(Long id, ProductMypriceRequestDto requestDto) {
            int myprice = requestDto.getMyprice();
            if (myprice < MIN_MY_PRICE) {
                throw new IllegalArgumentException("유효하지 않은 관심 가격입니다. 최소 " + MIN_MY_PRICE + " 원 이상으로 설정해 주세요.");
            }
        
            Product product = productRepository.findById(id).orElseThrow(() ->
                    new NullPointerException("해당 상품을 찾을 수 없습니다.")
            );
        
        		product.update(requestDto);
        
            return new ProductResponseDto(product);
        }
        ```
        
    4. Product Entity 최저 희망가 (myprice) 수정 (Product)
        
        ```java
        public void update(ProductMypriceRequestDto requestDto) {
            this.myprice = requestDto.getMyprice();
        }
        ```
        
- 관심상품 조회 API
    ![Untitled (8).png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/bf9fb59c-bd04-470f-bd38-4513c08a33c6/Untitled_(8).png)
    1. 요청 받기 및 응답 보내기
        
        ```java
        // 관심 상품 조회하기
        @GetMapping("/products")
        public List<ProductResponseDto> getProducts() {
            // 응답 보내기
            return productService.getProducts();
        }
        ```
        
    2. DB 조회
        
        ```java
        public List<ProductResponseDto> getProducts() {
            List<Product> productList = productRepository.findAll();
            List<ProductResponseDto> responseDtoList = new ArrayList<>();
        
            for (Product product : productList) {
                responseDtoList.add(new ProductResponseDto(product));
            }
            return responseDtoList;
        }
        ```
        
## 16. Scheduler 구현

- 요구 기능
    👉 매일 새벽 1시에 관심 상품 목록 제목으로 검색해서, 최저가 정보를 업데이트하는 스케줄러를 만들어보겠습니다.
    - [코드 스니펫] **CronExpression**
        
        ```
        https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/support/CronExpression.html
        ```
        
- Scheduler 구현
    - **[코드 스니펫] scheduler > Scheduler**
        
        ```java
        package com.sparta.myselectshop.scheduler;
        
        import com.sparta.myselectshop.entity.Product;
        import com.sparta.myselectshop.naver.dto.ItemDto;
        import com.sparta.myselectshop.naver.service.NaverApiService;
        import com.sparta.myselectshop.repository.ProductRepository;
        import com.sparta.myselectshop.service.ProductService;
        import lombok.RequiredArgsConstructor;
        import lombok.extern.slf4j.Slf4j;
        import org.springframework.scheduling.annotation.Scheduled;
        import org.springframework.stereotype.Component;
        
        import java.util.List;
        import java.util.concurrent.TimeUnit;
        
        @Slf4j(topic = "Scheduler")
        @Component
        @RequiredArgsConstructor
        public class Scheduler {
        
            private final NaverApiService naverApiService;
            private final ProductService productService;
            private final ProductRepository productRepository;
        
            // 초, 분, 시, 일, 월, 주 순서
            @Scheduled(cron = "0 0 1 * * *") // 매일 새벽 1시
            public void updatePrice() throws InterruptedException {
                log.info("가격 업데이트 실행");
                List<Product> productList = productRepository.findAll();
                for (Product product : productList) {
                    // 1초에 한 상품 씩 조회합니다 (NAVER 제한)
                    TimeUnit.SECONDS.sleep(1);
        
                    // i 번째 관심 상품의 제목으로 검색을 실행합니다.
                    String title = product.getTitle();
                    List<ItemDto> itemDtoList = naverApiService.searchItems(title);
        
                    if (itemDtoList.size() > 0) {
                        ItemDto itemDto = itemDtoList.get(0);
                        // i 번째 관심 상품 정보를 업데이트합니다.
                        Long id = product.getId();
                        try {
                            productService.updateBySearch(id, itemDto);
                        } catch (Exception e) {
                            log.error(id + " : " + e.getMessage());
                        }
                    }
                }
            }
        
        }
        ```
        
    - **ProductService**
        
        ```java
        @Transactional
        public void updateBySearch(Long id, ItemDto itemDto) {
            Product product = productRepository.findById(id).orElseThrow(
                    () -> new NullPointerException("해당 상품은 존재하지 않습니다.")
            );
            product.updateByItemDto(itemDto);
        }
        ```
        
    - **Product**
        
        ```java
        public void updateByItemDto(ItemDto itemDto) {
            this.lprice = itemDto.getLprice();
        }
        ```
        
    - **@EnableScheduling**
        
        ```java
        @EnableScheduling // 스프링 부트에서 스케줄러가 작동하게 합니다.
        @EnableJpaAuditing // 시간 자동 변경이 가능하도록 합니다.
        @SpringBootApplication
        public class MyselectshopApplication {
        
            public static void main(String[] args) {
                SpringApplication.run(MyselectshopApplication.class, args);
            }
        
        }
        ```
