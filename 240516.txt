# 내일배움캠프 240515 TIL
Java 21일차
개인 과제, Spring MVC(15. HTTP 데이터 객체로 처리), 메모장, Database와 SQL
----------------------------------------------------------------------------------------

## 15. HTTP 데이터를 객체로 처리하는 방법
- @ModelAttribute
    - form 태그 POST
        🌐 POST http://localhost:8080/hello/request/form/model

            // [Request sample]
            // POST http://localhost:8080/hello/request/form/model
            // Header
            //  Content type: application/x-www-form-urlencoded
            // Body
            //  name=Robbie&age=95
            @PostMapping("/form/model")
            @ResponseBody
            public String helloRequestBodyForm(@ModelAttribute Star star) {
                return String.format("Hello, @ModelAttribute.<br> (name = %s, age = %d) ", star.name, star.age);
            }

        - HTML의 form 태그를 사용하여 POST 방식으로 HTTP 요청을 보낼 수 있습니다.
        - 이때 해당 데이터는 HTTP Body에 `name=Robbie&age=95` 형태로 담겨져서 서버로 전달됩니다.
        - 해당 데이터를 Java의 객체 형태로 받는 방법은 @ModelAttribute 애너테이션을 사용한 후 Body 데이터를 `Star star` 받아올 객체를 선언합니다.

    - Query String 방식
        🌐 GET http://localhost:8080/hello/request/form/param/model?name=Robbie&age=95

            // [Request sample]
            // GET http://localhost:8080/hello/request/form/param/model?name=Robbie&age=95
            @GetMapping("/form/param/model")
            @ResponseBody
            public String helloRequestParam(@ModelAttribute Star star) {
                return String.format("Hello, @ModelAttribute.<br> (name = %s, age = %d) ", star.name, star.age);
            }

        - `?name=Robbie&age=95` 처럼 데이터가 두 개만 있다면 괜찮지만 여러 개 있다면 @RequestParam 애너테이션으로 하나 씩 받아오기 힘들 수 있습니다.
        - 이때 @ModelAttribute 애너테이션을 사용하면 Java의 객체로 데이터를 받아올 수 있습니다.
            - 파라미터에 선언한 `Star` 객체가 생성되고, 오버로딩된 생성자 혹은 Setter 메서드를 통해 요청된 `name & age` 의 값이 담겨집니다.
        ⚠️ @ModelAttribute는 생략이 가능합니다.
        이때, 생각해볼 문제가있습니다!
        Spring에서는 @ModelAttribute뿐만 아니라 @RequestParam도 생략이 가능합니다.
        그렇다면 Spring은 이를 어떻게 구분할까요?
        간단하게 설명하자면 Spring은 해당 파라미터(매개변수)가 SimpleValueType이라면 @RequestParam으로 간주하고 아니라면 @ModelAttribute가 생략되어있다 판단합니다.
         SimpleValueType은 원시타입(int), Wrapper타입(Integer), Date등의 타입을 의미합니다.

- @RequestBody
    - HTTP Body에 JSON 데이터를 담아 서버에 전달할 때 해당 Body 데이터를 Java의 객체로 전달 받을 수 있습니다.
    - Body JSON 데이터
        🌐 POST http://localhost:8080/hello/request/form/json

            // [Request sample]
            // POST http://localhost:8080/hello/request/form/json
            // Header
            //  Content type: application/json
            // Body
            //  {"name":"Robbie","age":"95"}
            @PostMapping("/form/json")
            @ResponseBody
            public String helloPostRequestJson(@RequestBody Star star) {
                return String.format("Hello, @RequestBody.<br> (name = %s, age = %d) ", star.name, star.age);
            }

        - HTTP Body에 `{"name":"Robbie","age":"95"}`  `JSON` 형태로 데이터가 서버에 전달되었을 때 @RequestBody 애너테이션을 사용해 데이터를 객체 형태로 받을 수 있습니다.
        ⚠️ 데이터를 Java의 객체로 받아올 때 주의할 점이 있습니다.
        - 해당 객체의 필드에 데이터를 넣어주기 위해 set or get 메서드 또는 오버로딩된 생성자가 필요합니다.
        - 예를 들어 @ModelAttribute 사용하여 데이터를 받아올 때 해당 객체에 set 메서드 혹은 오버로딩된 생성자가 없다면 받아온 데이터를 해당 객체의 필드에 담을 수 없습니다.
        - 이처럼 객체로 데이터를 받아올 때 데이터가 제대로 들어오지 않는다면 우선 해당 객체의 set or get 메서드 또는 오버로딩된 생성자의 유무를 확인하시면 좋습니다.
        </aside>


## 16. 메모장 프로젝트 설계

- 프로젝트 생성
    - 프로젝트 준비하기
        1. IntelliJ를 실행합니다.
        2. New Project를 클릭합니다.
        3. 왼쪽 메뉴에서 "Spring Initializr”를 클릭하고 아래와 같이 설정합니다.
        4.  🚒**[중요] 꼭 다음 사항을 확인해주세요.**
            - Name: memo
            - **Language: Java**
            - **Build system: Gradle - Groovy**
            - Group: com.sparta
            - **JDK: 17**
            - 프로젝트 경로(Location)는 자유롭게 설정하시면 됩니다.
        5. Next를 클릭합니다.
        6. Dependencies를 아래 사진과 같이 추가해주고 Create를 클릭합니다.

- 메모장 기능 설계
    1. 접속 하자마자 메모 전체 목록 조회하기
        1. GET API 사용해서 메모 목록 불러오기
    2. 메모 생성하기
        1. POST API 사용해서 메모 신규 생성하기
        2. 생성된 메모 반환
    3. 메모 변경하기
        1. PUT API 사용해서 메모 내용 변경하기
        2. 사용자가 클릭한 메모가 DB에 존재하는지 확인하기
        3. 해당 메모 내용 변경
    4. 메모 삭제하기
        1. DELETE API 사용해서 메모 삭제하기
        2. 사용자가 삭제하려는 메모가 DB에 존재하는지 확인하기
        3. DB에서 해당 메모 삭제

- API 테이블
    [메모장 API](https://www.notion.so/8dc2232b2a354d988cce0463276200f1?pvs=21)


## 17. Create, Read 구현하기
- DTO란 무엇일까?
    - 이름에서도 알 수 있듯이 DTO(Data Transfer Object)는 데이터 전송 및 이동을 위해 생성되는 객체를 의미합니다.
    - Client에서 보내오는 데이터를 객체로 처리할 때 사용됩니다.
    - 또한 서버의 계층간의 이동에도 사용됩니다.
        - 지금은 계층간의 이동이라는 용어에 대해  잘 이해가 되지 않겠지만 이후 강의를 통해 자연스럽게 이해가 되실겁니다.
    - 그리고 DB와의 소통을 담당하는 Java 클래스를 그대로 Client에 반환하는 것이 아니라 DTO로 한번 변환한 후 반환할 때도 사용됩니다.
        - 마찬가지로 이후 강의를 통해 자연스럽게 학습할 수 있습니다.
    📌 Request의 데이터를 처리할 때 사용되는 객체는 RequestDto, Response를 할 때 사용되는 객체는 ResponseDto라는 이름을 붙여 DTO 클래스를 만들 수 있습니다.
    - 절대적인 규칙은 아니기 때문에 조직에 따라 규칙이 다를 수 있습니다.
    - 강의에서는 해당 규칙에 따라 DTO 클래스를 제작하도록 하겠습니다.

- Create 구현
    1. 메모 데이터를 저장할 Memo 클래스 생성
        - [코드 스니펫] entity > Memo
            package com.sparta.memo.entity;

            import lombok.Getter;
            import lombok.NoArgsConstructor;
            import lombok.Setter;

            @Getter
            @Setter
            @NoArgsConstructor
            public class Memo {
                private Long id;
                private String username;
                private String contents;
            }

    2. 메모 생성하기 API를 받을 수 있는 Controller와 메서드 생성

        @RestController
        @RequestMapping("/api")
        public class MemoController {

            @PostMapping("/memos")
            public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
                return null;
            }

        }

    3. Client에 데이터를 반환할 때 사용할 MemoResponseDto 클래스 생성
        - [코드 스니펫] MemoResponseDto
            package com.sparta.memo.dto;

            import lombok.Getter;

            @Getter
            public class MemoResponseDto {
                private Long id;
                private String username;
                private String contents;
            }

    4. Client의 요청 데이터를 받아줄 MemoRequestDto 클래스 생성
        - [코드 스니펫] MemoRequestDto
            package com.sparta.memo.dto;

            import lombok.Getter;

            @Getter
            public class MemoRequestDto {
                private String username;
                private String contents;
            }

    5. DB와 연결을 하지 않았기 때문에 메모 데이터를 저장할 Java 컬렉션 생성

    private final Map<Long, Memo> memoList = new HashMap<>();

    1. 메모 생성 로직 작성

        @PostMapping("/memos")
        public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
            // RequestDto -> Entity
            Memo memo = new Memo(requestDto);

            // Memo Max ID Check
            Long maxId = memoList.size() > 0 ? Collections.max(memoList.keySet()) + 1 : 1;
            memo.setId(maxId);

            // DB 저장
            memoList.put(memo.getId(), memo);

            // Entity -> ResponseDto
            MemoResponseDto memoResponseDto = new MemoResponseDto(memo);

            return memoResponseDto;
        }

- Read 구현

    @GetMapping("/memos")
    public List<MemoResponseDto> getMemos() {
        // Map To List
        List<MemoResponseDto> responseList = memoList.values().stream()
                .map(MemoResponseDto::new).toList();

        return responseList;
    }
    - DB 역할을 하는 memoList를 조회하여 List<MemoResponseDto>로 변환한 후 반환합니다.

- 구현 완료 코드
    - [코드 스니펫] MemoController
        package com.sparta.memo.controller;

        import com.sparta.memo.dto.MemoRequestDto;
        import com.sparta.memo.dto.MemoResponseDto;
        import com.sparta.memo.entity.Memo;
        import org.springframework.web.bind.annotation.*;

        import java.util.Collections;
        import java.util.HashMap;
        import java.util.List;
        import java.util.Map;

        @RestController
        @RequestMapping("/api")
        public class MemoController {

            private final Map<Long, Memo> memoList = new HashMap<>();

            @PostMapping("/memos")
            public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
                // RequestDto -> Entity
                Memo memo = new Memo(requestDto);

                // Memo Max ID Check
                Long maxId = memoList.size() > 0 ? Collections.max(memoList.keySet()) + 1 : 1;
                memo.setId(maxId);

                // DB 저장
                memoList.put(memo.getId(), memo);

                // Entity -> ResponseDto
                MemoResponseDto memoResponseDto = new MemoResponseDto(memo);

                return memoResponseDto;
            }

            @GetMapping("/memos")
            public List<MemoResponseDto> getMemos() {
                // Map To List
                List<MemoResponseDto> responseList = memoList.values().stream()
                        .map(MemoResponseDto::new).toList();

                return responseList;
            }
        }



## 18. Update, Delete 구현하기

- Update 구현
    @PutMapping("/memos/{id}")
    public Long updateMemo(@PathVariable Long id, @RequestBody MemoRequestDto requestDto) {
        // 해당 메모가 DB에 존재하는지 확인
        if(memoList.containsKey(id)) {
    				// 해당 메모 가져오기
            Memo memo = memoList.get(id);

            // memo 수정
            memo.update(requestDto);
            return memo.getId();
        } else {
            throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
        }
    }

    - Memo 클래스에 수정하는 기능의 메서드 update 생성

        public void update(MemoRequestDto requestDto) {
            this.username = requestDto.getUsername();
            this.contents = requestDto.getContents();
        }

- Delete 구현

    @DeleteMapping("/memos/{id}")
    public Long deleteMemo(@PathVariable Long id) {
        // 해당 메모가 DB에 존재하는지 확인
        if(memoList.containsKey(id)) {
            // 해당 메모 삭제하기
            memoList.remove(id);
            return id;
        } else {
            throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
        }
    }

- 구현 완료 코드
    - [코드 스니펫] MemoController
        package com.sparta.memo.controller;

        import com.sparta.memo.dto.MemoRequestDto;
        import com.sparta.memo.dto.MemoResponseDto;
        import com.sparta.memo.entity.Memo;
        import org.springframework.web.bind.annotation.*;

        import java.util.Collections;
        import java.util.HashMap;
        import java.util.List;
        import java.util.Map;

        @RestController
        @RequestMapping("/api")
        public class MemoController {

            private final Map<Long, Memo> memoList = new HashMap<>();

            @PostMapping("/memos")
            public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
                // RequestDto -> Entity
                Memo memo = new Memo(requestDto);

                // Memo Max ID Check
                Long maxId = memoList.size() > 0 ? Collections.max(memoList.keySet()) + 1 : 1;
                memo.setId(maxId);

                // DB 저장
                memoList.put(memo.getId(), memo);

                // Entity -> ResponseDto
                MemoResponseDto memoResponseDto = new MemoResponseDto(memo);

                return memoResponseDto;
            }

            @GetMapping("/memos")
            public List<MemoResponseDto> getMemos() {
                // Map To List
                List<MemoResponseDto> responseList = memoList.values().stream()
                        .map(MemoResponseDto::new).toList();

                return responseList;
            }

            @PutMapping("/memos/{id}")
            public Long updateMemo(@PathVariable Long id, @RequestBody MemoRequestDto requestDto) {
                // 해당 메모가 DB에 존재하는지 확인
                if(memoList.containsKey(id)) {
                    // 해당 메모 가져오기
                    Memo memo = memoList.get(id);

                    // memo 수정
                    memo.update(requestDto);
                    return memo.getId();
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }

            @DeleteMapping("/memos/{id}")
            public Long deleteMemo(@PathVariable Long id) {
                // 해당 메모가 DB에 존재하는지 확인
                if(memoList.containsKey(id)) {
                    // 해당 메모 삭제하기
                    memoList.remove(id);
                    return id;
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }
        }



## 19. Database
- 개념
    💡 Database를 한 마디로 정의하면 ‘***데이터의 집합***’ ****이라고 할 수 있습니다.
    ****DB는 우리가 매일 사용하는 카톡 메시지, 인스타그램의 사진등의 정보를 저장하고 관리해 줍니다.

- 용어 정리
    💡 DBMS
    - DBMS 는 ‘***Database Management System***’ 의 약자로 Database를 관리하고 운영하는 소프트웨어를 의미합니다.

    💡 RDBMS
    - RDBMS는 ‘***Relational DBMS***’의 약자로 관계형 데이터베이스라고 불립니다.
    - RDBMS는 테이블(table)이라는 최소 단위로 구성되며, 이 테이블은 열(column)과 행(row)으로 이루어져 있습니다.
    - 테이블간 FK(Foreign Key)를 통해 다른 데이터를 조합해서 함께 볼수 있다라는 장점이 있습니다.

- RDBMS의 종류
    💡 각 제품 간 차이가 크지 않아서 사실 어떤 걸 사용하든 좋습니다. 유료인 Oracle을 제외하고 보통 MySQL, PostgreSQL 중에서 많이 고르는 편인데, 우리는 MySQL을 사용할 것입니다.
    - MySQL
        💡 MySQL
        - MySQL은 우리가 서비스를 배포할 때 사용할 데이터베이스입니다.
        - AWS RDS 라는 서비스를 사용해 붙여볼 예정입니다.
        - Spring과 궁합이 좋아서 많은 회사에서 사용하고 있습니다.



## 20. SQL
- 개념
    💡 SQL은 ‘***Structured Query Language***’ 의 약자로 RDBMS에서 사용되는 언어입니다.
    수 많은 정보를 Database에서 조작하고 관리하기 위해서는 SQL 언어를 사용해야합니다.
    - 국제표준화기구에서 SQL에 대한 표준을 정해서 발표하고 있습니다. 하지만…
    - DBMS를 만드는 회사가 여러 곳이기 때문에 DBMS 마다 표준 SQL을 준수하되, 각 제품의 특성을 반영하기 위한 약간의 차이가 존재합니다.

- DDL
    💡 ‘***Data Definition Language’*** 의 약자로 테이블이나 관계의 구조를 생성하는데 사용합니다
    - CREATE : 새로운 데이터베이스 및 테이블을 생성해 줍니다.

        CREATE DATABASE 데이터베이스이름;
        CREATE TABLE 테이블이름
        (
        		필드이름1 필드타입1,
            필드이름2 필드타입2,
            ...
        );

    - ALTER : 데이터베이스와 테이블의 내용을 수정할 수 있습니다.
        ALTER TABLE 테이블이름 ADD 필드이름 필드타입;
        ALTER TABLE 테이블이름 DROP 필드이름;
        ALTER TABLE 테이블이름 MODIFY COLUMN 필드이름 필드타입;

    - DROP : 데이터베이스와 테이블을 삭제할 수 있습니다. 데이터 및 테이블 전체를 삭제합니다.
        DROP DATABASE 데이터베이스이름;
        DROP TABLE 테이블이름;

    - TRUNCATE : 데이터베이스와 테이블을 삭제할 수 있습니다. 최초 테이블이 만들어졌던 상태 즉, 컬럼값만 남깁니다.
        TRUNCATE DATABASE 데이터베이스이름;
        TRUNCATE TABLE 테이블이름;

- DCL
    💡 ‘***Data Control Language*’** 의 약자로 데이터의 사용 권한을 관리하는데 사용합니다.
    - GRANT : 사용자 또는 ROLE에 대해 권한을 부여할 수 있습니다.
        GRANT [객체권한명] (컬럼)
        ON [객체명]
        TO { 유저명 | 롤명 | PUBLC} [WITH GRANT OPTION];

        //ex
        GRANT SELECT ,INSERT
        ON mp
        TO scott WITH GRANT OPTION;

    - REVOKE : 사용자 또는 ROLE에 부여한 권한을 회수할 수 있습니다.
        REVOKE { 권한명 [, 권한명...] ALL}
        ON 객체명
        FROM {유저명 [, 유저명...] | 롤명(ROLE) | PUBLIC}
        [CASCADE CONSTRAINTS];

        //ex
        REVOKE SELECT , INSERT
        ON emp
        FROM scott
        [CASCADE CONSTRAINTS];

- DML
    💡 ‘***Data Manipulation Language*’** 의 약자로 ****테이블에 데이터를 검색, 삽입, 수정, 삭제하는데 ****사용합니다**.**

    - INSERT : 테이블에 새로운 row를 추가할 수 있습니다.
        INSERT INTO 테이블이름(필드이름1, 필드이름2, 필드이름3, ...) VALUES(데이터값1, 데이터값2, 데이터값3, ...);
        INSERT INTO 테이블이름 VALUES(데이터값1, 데이터값2, 데이터값3, ...);

    - SELECT : 테이블의 row를 선택할 수 있습니다.
        SELECT 필드이름 FROM 테이블이름 [WHERE 조건];

    - UPDATE : 테이블의 row의 내용을 수정할 수 있습니다.
        UPDATE 테이블이름 SET 필드이름1=데이터값1, 필드이름2=데이터값2, ... WHERE 필드이름=데이터값;

    - DELETE : 테이블의 row를 삭제할 수 있습니다.
        DELETE FROM 테이블이름 WHERE 필드이름=데이터값;



## 22. JDBC란 무엇일까?
📌 애플리케이션 서버와 데이터베이스는 어떻게 소통해야 할까요?
- 우리는 애플리케이션 서버에서 요청을 받고, 해당 요청을 처리하기 위해 데이터베이스와 소통을 해야합니다.
- 따라서 실제로 서버가 데이터베이스와 어떠한 방법을 통해 소통하고 있는지 알아보려고 합니다.
- JDBC의 등장배경
    - 애플리케이션 서버에서 DB에 접근 하기 위해서는 여러가지 작업이 필요합니다.
        1. 우선 DB에 연결하기 위해 커넥션을 연결해야합니다.
        2. SQL을 작성한 후 커넥션을 통해 SQL을 요청합니다.
        3. 요청한 SQL에 대한 결과를 응답 받습니다.
    - 기존에 사용하던 MySQL 서버를 PostgreSQL 서버로 변경한다면 무슨일이 발생할까요?
    - MySQL과 PostgreSQL은 커넥션을 연결하는 방법, SQL을 전달하는 방법, 결과를 응답받는 방법 모두 다를 수 있습니다.
    - 따라서 애플리케이션 서버에서 작성했던 DB 연결 로직들을 전부 수정해야합니다.
    - 이러한 문제를 해결하기위해 JDBC 표준 인터페이스가 등장했습니다.
    - JDBC는 Java Database Connectivity로 DB에 접근할 수 있도록 Java에서 제공하는 API입니다.
    - JDBC에 연결해야하는 DB의 JDBC 드라이버를 제공하면 DB 연결 로직을 변경할 필요없이 DB 변경이 가능합니다.
        - DB 회사들은 자신들의 DB에 맞도록 JDBC 인터페이스를 구현한 후 라이브러리로 제공하는데 이를 JDBC 드라이버라 부릅니다.
    - 따라서, MySQL 드라이버를 사용해 DB에 연결을 하다 PostgreSQL 서버로 변경이 필요할 때 드라이버만 교체하면 손쉽게 DB 변경이 가능합니다.

- JdbcTemplate이란?
    - JDBC의 등장으로 손쉽게 DB교체가 가능해졌지만 아직도 DB에 연결하기 위해 여러가지 작업 로직들을 직접 작성해야한다는 불편함이 남았습니다.
    - 이러한 불편함을 해결하기 위해 커넥션 연결, statement 준비 및 실행, 커넥션 종료 등의 반복적이고 중복되는 작업들을 대신 처리해주는 JdbcTemplate이 등장했습니다.

- JdbcTemplate 사용방법
    1. application.properties에 DB에 접근하기 위한 정보를 작성합니다.
        - [코드 스니펫] application.properties
            spring.datasource.url=jdbc:mysql://localhost:3306/memo
            spring.datasource.username=root
            spring.datasource.password={비밀번호}
            spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

    2. build.gradle에 JDBC 라이브러리와 MySQL을 등록합니다.
        - [코드 스니펫] build.gradle : JDBC, MySQL 추가
            // MySQL
            implementation 'mysql:mysql-connector-java:8.0.28'
            implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

        - 프로젝트 설정
            - Intellij Database 연동
                - CREATE DATABASE
                    CREATE DATABASE memo;

                - 연동 순서
                    1. Database 탭을 클릭하시고 + 버튼을 누릅니다.
                    2. Data Source > MySQL 를 클릭합니다.
                    3. User, Password, Database 정보를 추가한 후 Ok를 클릭합니다.
                    4. MySQL Database에 연결이 완료되었습니다.

            - [코드 스니펫] create memo table
                create table memo
                (
                    id       bigint       not null auto_increment,
                    contents varchar(500) not null,
                    username varchar(255) not null,
                    primary key (id)
                );

    3. DB연결이 필요한 곳에서 JdbcTemplate을 주입받아와 사용합니다.
        private final JdbcTemplate jdbctemplate;

        public MemoRepository(JdbcTemplate jdbcTemplate) {
                this.jdbcTemplate = jdbcTemplate;
        }
        - 생성자의 파라미터를 통해 JdbcTemplate 객체가 자동으로 넘어와 jdbctemplate 변수에 저장됩니다.

    - INSERT
        String sql = "INSERT INTO memo (username, contents) VALUES (?, ?)";
        jdbcTemplate.update(sql, "Robbie", "오늘 하루도 화이팅!");

        - INSERT SQL을 작성해 String 변수에 저장합니다.
            - 이때, 넣고자 하는 데이터 부분에 ?를 사용하면 유동적으로 데이터를 넣어줄 수 있습니다.
        - `jdbcTemplate.update()` 메서드는 INSERT, UPDATE, DELETE 와 같이 생성, 수정, 삭제에 사용될 수 있는데 첫 번째 파라미터로 SQL을 받고 그 이후에는 ?에 들어갈 값을 받습니다.
    - UPDATE
        String sql = "UPDATE memo SET username = ? WHERE id = ?";
        jdbcTemplate.update(sql, "Robbert", 1);

        - UPDATE SQL을 작성해 String 변수에 저장한 후 `update()` 메서드 첫 번째 파라미터에 넣어줍니다.
            - 이때, 넣고자 하는 데이터 부분에 ?를 사용하면 유동적으로 데이터를 넣어줄 수 있습니다.
    - DELETE
        String sql = "DELETE FROM memo WHERE id = ?";
        jdbcTemplate.update(sql, 1);

        - DELETE SQL을 작성해 String 변수에 저장한 후 `update()` 메서드 첫 번째 파라미터에 넣어줍니다.
            - 이때, 넣고자 하는 데이터 부분에 ?를 사용하면 유동적으로 데이터를 넣어줄 수 있습니다.
    - SELECT
        String sql = "SELECT * FROM memo";
        return jdbcTemplate.query(sql, new RowMapper<MemoResponseDto>() {
            @Override
            public MemoResponseDto mapRow(ResultSet rs, int rowNum) throws SQLException {
                // SQL 의 결과로 받아온 Memo 데이터들을 MemoResponseDto 타입으로 변환해줄 메서드
                Long id = rs.getLong("id");
                String username = rs.getString("username");
                String contents = rs.getString("contents");
                return new MemoResponseDto(id, username, contents);
            }
        });

        - SELECT SQL을 작성해 String 변수에 저장한 후 `query()` 메서드 첫 번째 파라미터에 넣어줍니다.
        - SELECT의 경우 결과가 여러 줄로 넘어오기 때문에 RowMapper를 사용하여 한 줄씩 처리 할 수 있습니다.
            - RowMapper는 인터페이스 이기 때문에 익명 클래스를 구현하여 처리합니다.
            - 오버라이딩 된 mapRow 메서드는 제네릭스에 선언한 MemoResponseDto 타입으로 데이터 한 줄을 변환하는 작업을 수행합니다.

    - **[코드 스니펫] MemoController**
        package com.sparta.memo.controller;

        import com.sparta.memo.dto.MemoRequestDto;
        import com.sparta.memo.dto.MemoResponseDto;
        import com.sparta.memo.entity.Memo;
        import org.springframework.jdbc.core.JdbcTemplate;
        import org.springframework.jdbc.core.RowMapper;
        import org.springframework.jdbc.support.GeneratedKeyHolder;
        import org.springframework.jdbc.support.KeyHolder;
        import org.springframework.web.bind.annotation.*;

        import java.sql.PreparedStatement;
        import java.sql.ResultSet;
        import java.sql.SQLException;
        import java.sql.Statement;
        import java.util.List;

        @RestController
        @RequestMapping("/api")
        public class MemoController {

            private final JdbcTemplate jdbcTemplate;

            public MemoController(JdbcTemplate jdbcTemplate) {
                this.jdbcTemplate = jdbcTemplate;
            }

            @PostMapping("/memos")
            public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
                // RequestDto -> Entity
                Memo memo = new Memo(requestDto);

                // DB 저장
                KeyHolder keyHolder = new GeneratedKeyHolder(); // 기본 키를 반환받기 위한 객체

                String sql = "INSERT INTO memo (username, contents) VALUES (?, ?)";
                jdbcTemplate.update( con -> {
                            PreparedStatement preparedStatement = con.prepareStatement(sql,
                                    Statement.RETURN_GENERATED_KEYS);

                            preparedStatement.setString(1, memo.getUsername());
                            preparedStatement.setString(2, memo.getContents());
                            return preparedStatement;
                        },
                        keyHolder);

                // DB Insert 후 받아온 기본키 확인
                Long id = keyHolder.getKey().longValue();
                memo.setId(id);

                // Entity -> ResponseDto
                MemoResponseDto memoResponseDto = new MemoResponseDto(memo);

                return memoResponseDto;
            }

            @GetMapping("/memos")
            public List<MemoResponseDto> getMemos() {
                // DB 조회
                String sql = "SELECT * FROM memo";

                return jdbcTemplate.query(sql, new RowMapper<MemoResponseDto>() {
                    @Override
                    public MemoResponseDto mapRow(ResultSet rs, int rowNum) throws SQLException {
                        // SQL 의 결과로 받아온 Memo 데이터들을 MemoResponseDto 타입으로 변환해줄 메서드
                        Long id = rs.getLong("id");
                        String username = rs.getString("username");
                        String contents = rs.getString("contents");
                        return new MemoResponseDto(id, username, contents);
                    }
                });
            }

            @PutMapping("/memos/{id}")
            public Long updateMemo(@PathVariable Long id, @RequestBody MemoRequestDto requestDto) {
                // 해당 메모가 DB에 존재하는지 확인
                Memo memo = findById(id);
                if(memo != null) {
                    // memo 내용 수정
                    String sql = "UPDATE memo SET username = ?, contents = ? WHERE id = ?";
                    jdbcTemplate.update(sql, requestDto.getUsername(), requestDto.getContents(), id);

                    return id;
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }

            @DeleteMapping("/memos/{id}")
            public Long deleteMemo(@PathVariable Long id) {
                // 해당 메모가 DB에 존재하는지 확인
                Memo memo = findById(id);
                if(memo != null) {
        						// memo 삭제
                    String sql = "DELETE FROM memo WHERE id = ?";
                    jdbcTemplate.update(sql, id);

                    return id;
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }

            private Memo findById(Long id) {
                // DB 조회
                String sql = "SELECT * FROM memo WHERE id = ?";

                return jdbcTemplate.query(sql, resultSet -> {
                    if(resultSet.next()) {
                        Memo memo = new Memo();
                        memo.setUsername(resultSet.getString("username"));
                        memo.setContents(resultSet.getString("contents"));
                        return memo;
                    } else {
                        return null;
                    }
                }, id);
            }
        }

    💡 혹시! JdbcTemplate을 사용하여 DB와 소통하는 방법이 어렵고 복잡하다고 느껴지셨나요?
    물론 JdbcTemplate이 JDBC를 직접 사용할 때 발생하는 불편함을 해결해 주었지만 아직도 복잡하고 사용하기 까다로운 것은 분명한 사실입니다.
    다행히도 Java 개발자들을 위해 DB와 객체를 매핑하여 소통할 수 있는 ORM이라는 기술이 등장했습니다.
    따라서 JdbcTemplate 사용방법은 가볍게 보고 넘어가도록 하겠습니다.
