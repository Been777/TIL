# 내일배움캠프 240506 TIL
Java 12일차
객체지향 프로그래밍 이해, 클래스 설계, 객체 생성
---------------------------------------------

## 1. 객체지향 프로그래밍 이해하기

📌 현실 세계에서 어떠한 제품을 만들기 위해 부품들을 하나씩 조립해서 완성시키는 것처럼 소프트웨어 또한 필요한 부품들을 만들고 하나씩 조립해서 하나의 완성된 프로그램을 만들 수 있는데 이러한 기법을 ‘객체지향 프로그래밍’이라고 부릅니다.

- 우리는 소프트웨어에서의 부품을 ‘객체’라고 표현하는데 이 객체가 무엇인지 살펴보겠습니다.

- 객체란?
    - 객체는 세상에 존재하는 물체를 뜻하며 식별이 가능한 것을 의미합니다.
        - 예를 들자면 물리적으로 존재하는 자동차, 도서관, 계산기를 객체라 볼 수 있습니다.
        - 강의, 배달 주문, 운동과 같은 개념적인 것 또한 식별이 가능하기 때문에 객체라 볼 수 있습니다.
    - 자동차를 기반으로 하여 객체에 대해 좀 더 자세하게 살펴보겠습니다.
    - 객체는 속성과 행위로 구성이 되었습니다.
        - 자동차의 속성과 행위를 표현해 보겠습니다.
            - 자동차는 회사, 모델, 색상, 가격, 속도 등의 속성을 가질 수 있습니다.
            - 자동차는 가속, 브레이크, 기어 변속, 조명, 경적 등의 행위를 가질 수 있습니다.
    - Java에서는 이러한 속성과 행위를 필드와 메서드로 정의하여 구현할 수 있습니다.
    - 이처럼 현실 세계에 있는 객체를 소프트웨어의 객체로 설계하는 것을 ‘객체 모델링’이라고 부릅니다.

- 객체지향 프로그래밍의 특징

    📌 우리가 객체지향 프로그래밍을 하다 보면 필연적으로 만나게 되는 개념이 있습니다.

    - 바로 캡슐화, 상속, 다형성, 추상화입니다.
    - 앞으로 학습하게 되는 내용에 포함되어 있기 때문에 간단하게 학습하고 가겠습니다.
    </aside>

    - 캡슐화
        - 캡슐화란 속성(필드)와 행위(메서드)를 하나로 묶어 객체로 만든 후 실제 내부 구현 내용은 외부에서 알 수 없게 감추는 것을 의미합니다.
        - 외부 객체에서는 캡슐화된 객체의 내부 구조를 알 수 없기 때문에 노출시켜 준 필드 혹은 메서드를 통해 접근할 수 있습니다.
        - 필드와 메서드를 캡슐화하여 숨기는 이유는 외부 객체에서 해당 필드와 메서드를 잘못 사용하여 객체가 변화하지 않게 하는 데 있습니다.
        - Java에서는 캡슐화된 객체의 필드와 메서드를 노출시킬지 감출지 결정하기 위해 접근 제어자를 사용합니다.
    - 상속
        - 객체지향 프로그래밍에는 부모 객체와 자식 객체가 존재합니다.
        - 부모 객체는 가지고 있는 필드와 메서드를 자식 객체에 물려주어 자식 객체가 이를 사용할 수 있도록 만들 수 있습니다.
        - 위 같은 행위를 상속이라고 할 수 있는데 상속을 하는 이유는 다음과 같습니다.
            1. 각각의 객체들을 상속 관계로 묶음으로써 객체 간의 구조를 파악하기 쉬워집니다.
            2. 필드와 메서드를 변경하는 경우 부모 객체에 있는 것만 수정하게 되면 자식 객체 전부 반영이 되기 때문에 일관성을 유지하기 좋습니다.
            3. 자식 객체가 부모 객체의 필드와 메서드를 물려받아 사용할 수 있기 때문에 코드의 중복이 줄어들며 코드의 재사용성이 증가됩니다.

## 2. 클래스 설계

📌 클래스는 객체를 생성하기 위한 설계도라고 배웠습니다.

- 클래스의 구성 멤버에는 필드, 생성자, 메서드가 있습니다.
- 4 STEP
    📌 우리가 클래스를 만들기 위해서는 4가지 STEP 이 필요합니다.

    1. 만들려고 하는 설계도를 선언합니다.(클래스 선언)
    2. 객체가 가지고 있어야 할 속성(필드)을 정의합니다.
    3. 객체를 생성하는 방식을 정의합니다.(생성자)
    4. 객체가 가지고 있어야 할 행위(메서드)를 정의합니다.

- 클래스 선언
    - **[코드스니펫]** 클래스 선언

        public class Car {

        }
----------------------------------------------------------------------------
    public class Car {}
    - public class Car : 공개된 자동차 클래스 선언을 의미합니다.
----------------------------------------------------------------------------

- 클래스의 필드 정의
    - **[코드스니펫]** 필드 정의
        public class Car {
        	String company; // 자동차 회사
            String model; // 자동차 모델
            String color; // 자동차 색상
            double price; // 자동차 가격
            double speed;  // 자동차 속도 , km/h
            char gear; // 기어의 상태, P,R,N,D
            boolean lights; // 자동차 조명의 상태
        }

----------------------------------------------------------------------------
        String company; // 자동차 회사
        String model; // 자동차 모델
        String color; // 자동차 색상
        double price; // 자동차 가격
        double speed;  // 자동차 속도 , km/h
        char gear; // 기어의 상태, P,R,N,D
        boolean lights; // 자동차 조명의 상태

    - 필드는 객체의 속성으로써 데이터를 저장하는 역할을 합니다.
        - String 타입의 company 변수 선언 : 자동차 회사명을 저장합니다.
        - String 타입의 model 변수 선언 : 자동차의 모델명을 저장합니다.
        - String 타입의 color 변수 선언 : 자동차의 색상을 저장합니다.
        - double 타입의 price 변수 선언 : 자동차의 가격을 저장합니다.
        - double 타입의 speed 변수 선언 : 자동차의 속도를 저장합니다.
        - char 타입의 gear 변수 선언 : 자동차의 기어 상태를 저장합니다.
        - boolean 타입의 lights 변수 선언 : 자동차의 조명 상태를 저장합니다.
----------------------------------------------------------------------------

- 클래스의 생성자 정의
    - **[코드스니펫]** 생성자 정의
        public class Car {
        		String company; // 자동차 회사
            String model; // 자동차 모델
            String color; // 자동차 색상
            double price; // 자동차 가격
            double speed;  // 자동차 속도 , km/h
            char gear; // 기어의 상태, P,R,N,D
            boolean lights; // 자동차 조명의 상태

        		public Car() {} // 기본 생성자
        }
----------------------------------------------------------------------------
    public Car() {}

    - public Car() : 자동차 객체의 생성 방식을 선언합니다.
        - 생성자는 반환 타입이 없고 이름은 클래스의 이름과 동일합니다.
        - 괄호( ) 안에 아무것도 없는 생성자를 기본 생성자라 합니다.
----------------------------------------------------------------------------

- 클래스의 메서드 정의
    - **[코드스니펫]** 메서드 정의
        public class Car {
        	String company; // 자동차 회사
            String model; // 자동차 모델
            String color; // 자동차 색상
            double price; // 자동차 가격
            double speed;  // 자동차 속도 , km/h
            char gear; // 기어의 상태, P,R,N,D
            boolean lights; // 자동차 조명의 상태

        		public Car() {} // 기본 생성자

        		double gasPedal(double kmh) {
                speed = kmh;
                return speed;
            }

            double brakePedal() {
                speed = 0;
                return speed;
            }

        		char changeGear(char type) {
                gear = type;
                return gear;
            }

            boolean onOffLights() {
                lights = !lights;
                return lights;
            }

        		void horn() {
                System.out.println("빵빵");
            }
        }

----------------------------------------------------------------------------
    double gasPedal(double kmh) {
        speed = kmh;
        return speed;
    }

    - 반환 타입이 double 인 `gasPedal(double kmh)` 메서드를 선언합니다.
        - 매개변수인 kmh을 통해 매개값을 전달받아 자동차의 속성인 speed 필드에 해당 값을 저장합니다.
=============================================================================

    double brakePedal() {
        speed = 0;
        return speed;
    }

    - 반환 타입이 double인 `brakePedal()` 메서드를 선언합니다.
        - 메서드가 호출되면 자동차의 속성인 speed 필드의 값을 0으로 바꾼 후 speed의 값을 반환합니다.
=============================================================================

    char changeGear(char type) {
        gear = type;
        return gear;
    }

    - 반환 타입이 char인 `changeGear(char type)` 메서드를 선언합니다.
        - 매개변수인 type을 통해 매개값을 전달받아 메서드가 호출되면 자동차의 속성인 gear 필드에 해당 값을 저장합니다.
=============================================================================

    boolean onOffLights() {
        lights = !lights;
        return lights;
    }

    - 반환 타입이 boolean인 `onOffLights()` 메서드를 선언합니다.
        - 메서드가 호출되면 자동차의 속성인 lights의 현재 논리 값을 반전 시킨 후 lights의 값을 반환합니다.
=============================================================================

    void horn() {
        System.out.println("빵빵");
    }

    - 반환값이 없는 `horn()` 메서드를 선언합니다.
        - 메서드가 호출되면 자동차의 경적소리인 “빵빵”이 출력됩니다.
=============================================================================



## 3. 객체 생성과 참조형 변수

- 객체 생성

    new Car(); // Car클래스 객체 생성

    - 객체 생성 연산자인 ‘new’를 사용하면 클래스로부터 객체를 생성할 수 있습니다.
    - new 연산자 뒤에는 해당 클래스의 생성자 호출 코드를 작성합니다.
    - 형태가 `Car();`즉, 기본 생성자의 형태와 같기 때문에 new 연산자에 의해 객체가 생성되면서 기본 생성자가 호출됩니다.
- 참조형 변수

    Car car1 = new Car(); // Car클래스의 객체인 car1 인스턴스 생성
    Car car2 = new Car(); // Car클래스의 객체인 car2 인스턴스 생성

    - new 연산자를 통해서 객체가 생성되면 해당 인스턴스의 주소가 반환되기 때문에 해당 클래스의 참조형 변수를 사용하여 받아줄 수 있습니다.

객체 배열
객체는 참조형 변수와 동일하게 취급되기 때문에 배열 또는 컬렉션에도 저장하여 관리할 수 있습니다.

[코드스니펫] 객체 배열
public class Main {
    public static void main(String[] args) {
        Car[] carArray = new Car[3];
        Car car1 = new Car();
        car1.changeGear('P');
        carArray[0] = car1;

        Car car2 = new Car();
        car2.changeGear('N');
        carArray[1] = car2;

        Car car3 = new Car();
        car3.changeGear('D');
        carArray[2] = car3;

        for (Car car : carArray) {
            System.out.println("car.gear = " + car.gear);
        }
    }
}

// 출력
//car.gear = P
//car.gear = N
//car.gear = D