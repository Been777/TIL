# 내일배움캠프 240520 TIL
Java 23일차
Layer Architecture, 역할 분리하기, IoC와 DI
----------------------------------------------------------------------------------------


## 01. 3 Layer Architecture

- 메모장 프로젝트의 문제점
    - 현재 우리가 작성한 메모장 프로젝트는 Controller 클래스 하나로 모든 API를 처리하고 있습니다.
    - 현재는 API 수가 적고 기능이 단순하여 코드가 복잡해 보이지 않을 수 있지만 앞으로 기능이 추가되고 복잡해진다면 문제가 발생할 수 있습니다.
        - 한 개의 클래스에 너무 많은 양의 코드가 존재하기 때문에 코드를 이해하기 어렵습니다.
        - 현업에서는 코드의 추가 혹은 변경 요청이 계속 생길 수 있습니다.
        - 문제가 발생했는데 해당 Controller 클래스를 구현한 개발자가 퇴사한다면?

- Spring의 3 Layer Architecture

    👉 이러한 문제점들을 해결하기 위해 서버 개발자들은 서버에서의 처리과정이 대부분 비슷하다는 걸 깨닫고, 처리 과정을 크게  **Controller, Service, Repository** 3개로 분리했습니다.

    각 역할 별로 하는 일을 정리해 보겠습니다.

    1. **Controller**
        - 클라이언트의 요청을 받습니다.
        - 요청에 대한 로직 처리는 Service에게 전담합니다.
            - Request 데이터가 있다면 Service에 같이 전달합니다.
        - Service에서 처리 완료된 결과를 클라이언트에게 응답합니다.

    2. **Service**
        - 사용자의 요구사항을 처리 ('비즈니스 로직') 하는 **실세 중에 실세**입니다.
            - 따라서 현업에서는 서비스 코드가 계속 비대해지고 있습니다.
        - DB 저장 및 조회가 필요할 때는 Repository에게 요청합니다.

    3. **Repository**
        - DB 관리 (연결, 해제, 자원 관리) 합니다.
        - DB CRUD 작업을 처리합니다.



## . 역할 분리하기
- Controller - Service 분리하기

    1. Controller는 API 요청을 받고 Service에 받아온 데이터와 함께 요청을 넘깁니다.
        - [코드 스니펫] Controller - Service 분리 : Controller

            ```java
            package com.sparta.memo.controller;

            import com.sparta.memo.dto.MemoRequestDto;
            import com.sparta.memo.dto.MemoResponseDto;
            import com.sparta.memo.service.MemoService;
            import org.springframework.jdbc.core.JdbcTemplate;
            import org.springframework.web.bind.annotation.*;

            import java.util.List;

            @RestController
            @RequestMapping("/api")
            public class MemoController {

                private final JdbcTemplate jdbcTemplate;

                public MemoController(JdbcTemplate jdbcTemplate) {
                    this.jdbcTemplate = jdbcTemplate;
                }

                @PostMapping("/memos")
                public MemoResponseDto createMemo(@RequestBody MemoRequestDto requestDto) {
                    MemoService memoService = new MemoService(jdbcTemplate);
                    return memoService.createMemo(requestDto);
                }

                @GetMapping("/memos")
                public List<MemoResponseDto> getMemos() {
                    MemoService memoService = new MemoService(jdbcTemplate);
                    return memoService.getMemos();
                }

                @PutMapping("/memos/{id}")
                public Long updateMemo(@PathVariable Long id, @RequestBody MemoRequestDto requestDto) {
                    MemoService memoService = new MemoService(jdbcTemplate);
                    return memoService.updateMemo(id, requestDto);
                }

                @DeleteMapping("/memos/{id}")
                public Long deleteMemo(@PathVariable Long id) {
                    MemoService memoService = new MemoService(jdbcTemplate);
                    return memoService.deleteMemo(id);
                }
            }
            ```

        - 요청을 전달하기 위해 MemoService를 인스턴스화한 후 사용합니다.
        - MemoService에서 JdbcTemplate을 사용해야하기 때문에 생성자 파라미터로 전달 해줍니다.

    2. 요청을 전달받은 Service는 해당 요청을 수행합니다.
        - [코드 스니펫] Controller - Service 분리 : Service

            ```java
            package com.sparta.memo.service;

            import com.sparta.memo.dto.MemoRequestDto;
            import com.sparta.memo.dto.MemoResponseDto;
            import com.sparta.memo.entity.Memo;
            import org.springframework.jdbc.core.JdbcTemplate;
            import org.springframework.jdbc.core.RowMapper;
            import org.springframework.jdbc.support.GeneratedKeyHolder;
            import org.springframework.jdbc.support.KeyHolder;

            import java.sql.PreparedStatement;
            import java.sql.ResultSet;
            import java.sql.SQLException;
            import java.sql.Statement;
            import java.util.List;

            public class MemoService {

                private final JdbcTemplate jdbcTemplate;

                public MemoService(JdbcTemplate jdbcTemplate) {
                    this.jdbcTemplate = jdbcTemplate;
                }

                public MemoResponseDto createMemo(MemoRequestDto requestDto) {
                    // RequestDto -> Entity
                    Memo memo = new Memo(requestDto);

                    // DB 저장
                    KeyHolder keyHolder = new GeneratedKeyHolder(); // 기본 키를 반환받기 위한 객체

                    String sql = "INSERT INTO memo (username, contents) VALUES (?, ?)";
                    jdbcTemplate.update( con -> {
                                PreparedStatement preparedStatement = con.prepareStatement(sql,
                                        Statement.RETURN_GENERATED_KEYS);

                                preparedStatement.setString(1, memo.getUsername());
                                preparedStatement.setString(2, memo.getContents());
                                return preparedStatement;
                            },
                            keyHolder);

                    // DB Insert 후 받아온 기본키 확인
                    Long id = keyHolder.getKey().longValue();
                    memo.setId(id);

                    // Entity -> ResponseDto
                    MemoResponseDto memoResponseDto = new MemoResponseDto(memo);

                    return memoResponseDto;
                }

                public List<MemoResponseDto> getMemos() {
                    // DB 조회
                    String sql = "SELECT * FROM memo";

                    return jdbcTemplate.query(sql, new RowMapper<MemoResponseDto>() {
                        @Override
                        public MemoResponseDto mapRow(ResultSet rs, int rowNum) throws SQLException {
                            // SQL 의 결과로 받아온 Memo 데이터들을 MemoResponseDto 타입으로 변환해줄 메서드
                            Long id = rs.getLong("id");
                            String username = rs.getString("username");
                            String contents = rs.getString("contents");
                            return new MemoResponseDto(id, username, contents);
                        }
                    });
                }

                public Long updateMemo(Long id, MemoRequestDto requestDto) {
                    // 해당 메모가 DB에 존재하는지 확인
                    Memo memo = findById(id);
                    if(memo != null) {
                        // memo 내용 수정
                        String sql = "UPDATE memo SET username = ?, contents = ? WHERE id = ?";
                        jdbcTemplate.update(sql, requestDto.getUsername(), requestDto.getContents(), id);

                        return id;
                    } else {
                        throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                    }
                }

                public Long deleteMemo(Long id) {
                    // 해당 메모가 DB에 존재하는지 확인
                    Memo memo = findById(id);
                    if(memo != null) {
            						// memo 삭제
                        String sql = "DELETE FROM memo WHERE id = ?";
                        jdbcTemplate.update(sql, id);

                        return id;
                    } else {
                        throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                    }
                }

                private Memo findById(Long id) {
                    // DB 조회
                    String sql = "SELECT * FROM memo WHERE id = ?";

                    return jdbcTemplate.query(sql, resultSet -> {
                        if(resultSet.next()) {
                            Memo memo = new Memo();
                            memo.setUsername(resultSet.getString("username"));
                            memo.setContents(resultSet.getString("contents"));
                            return memo;
                        } else {
                            return null;
                        }
                    }, id);
                }
            }
            ```


- Service - Repository 분리하기

    !https://s3-us-west-2.amazonaws.com/secure.notion-static.com/326eac47-e0a1-4871-a29b-4e7d80704a84/Untitled.png

    1. DB와 연결 및 CRUD 작업은 Repository에서 진행합니다.
        - [코드 스니펫] Service - Repository 분리 : Repository

            ```java
            package com.sparta.memo.repository;

            import com.sparta.memo.dto.MemoRequestDto;
            import com.sparta.memo.dto.MemoResponseDto;
            import com.sparta.memo.entity.Memo;
            import org.springframework.jdbc.core.JdbcTemplate;
            import org.springframework.jdbc.core.RowMapper;
            import org.springframework.jdbc.support.GeneratedKeyHolder;
            import org.springframework.jdbc.support.KeyHolder;

            import java.sql.PreparedStatement;
            import java.sql.ResultSet;
            import java.sql.SQLException;
            import java.sql.Statement;
            import java.util.List;

            public class MemoRepository {

                private final JdbcTemplate jdbcTemplate;

                public MemoRepository(JdbcTemplate jdbcTemplate) {
                    this.jdbcTemplate = jdbcTemplate;
                }

                public Memo save(Memo memo) {
                    // DB 저장
                    KeyHolder keyHolder = new GeneratedKeyHolder(); // 기본 키를 반환받기 위한 객체

                    String sql = "INSERT INTO memo (username, contents) VALUES (?, ?)";
                    jdbcTemplate.update(con -> {
                                PreparedStatement preparedStatement = con.prepareStatement(sql,
                                        Statement.RETURN_GENERATED_KEYS);

                                preparedStatement.setString(1, memo.getUsername());
                                preparedStatement.setString(2, memo.getContents());
                                return preparedStatement;
                            },
                            keyHolder);

                    // DB Insert 후 받아온 기본키 확인
                    Long id = keyHolder.getKey().longValue();
                    memo.setId(id);

                    return memo;
                }

                public List<MemoResponseDto> findAll() {
                    // DB 조회
                    String sql = "SELECT * FROM memo";

                    return jdbcTemplate.query(sql, new RowMapper<MemoResponseDto>() {
                        @Override
                        public MemoResponseDto mapRow(ResultSet rs, int rowNum) throws SQLException {
                            // SQL 의 결과로 받아온 Memo 데이터들을 MemoResponseDto 타입으로 변환해줄 메서드
                            Long id = rs.getLong("id");
                            String username = rs.getString("username");
                            String contents = rs.getString("contents");
                            return new MemoResponseDto(id, username, contents);
                        }
                    });
                }

                public void update(Long id, MemoRequestDto requestDto) {
                    String sql = "UPDATE memo SET username = ?, contents = ? WHERE id = ?";
                    jdbcTemplate.update(sql, requestDto.getUsername(), requestDto.getContents(), id);
                }

                public void delete(Long id) {
                    String sql = "DELETE FROM memo WHERE id = ?";
                    jdbcTemplate.update(sql, id);
                }

                public Memo findById(Long id) {
                    // DB 조회
                    String sql = "SELECT * FROM memo WHERE id = ?";

                    return jdbcTemplate.query(sql, resultSet -> {
                        if (resultSet.next()) {
                            Memo memo = new Memo();
                            memo.setUsername(resultSet.getString("username"));
                            memo.setContents(resultSet.getString("contents"));
                            return memo;
                        } else {
                            return null;
                        }
                    }, id);
                }
            }
            ```

2. DB 작업을 Repository에 요청하는 Service
    - [코드 스니펫] Service - Repository 분리 : Service

        ```java
        package com.sparta.memo.service;

        import com.sparta.memo.dto.MemoRequestDto;
        import com.sparta.memo.dto.MemoResponseDto;
        import com.sparta.memo.entity.Memo;
        import com.sparta.memo.repository.MemoRepository;
        import org.springframework.jdbc.core.JdbcTemplate;

        import java.util.List;

        public class MemoService {

            private final JdbcTemplate jdbcTemplate;

            public MemoService(JdbcTemplate jdbcTemplate) {
                this.jdbcTemplate = jdbcTemplate;
            }

            public MemoResponseDto createMemo(MemoRequestDto requestDto) {
                // RequestDto -> Entity
                Memo memo = new Memo(requestDto);

                // DB 저장
                MemoRepository memoRepository = new MemoRepository(jdbcTemplate);
                Memo saveMemo = memoRepository.save(memo);

                // Entity -> ResponseDto
                MemoResponseDto memoResponseDto = new MemoResponseDto(saveMemo);

                return memoResponseDto;
            }

            public List<MemoResponseDto> getMemos() {
                // DB 조회
                MemoRepository memoRepository = new MemoRepository(jdbcTemplate);
                return memoRepository.findAll();
            }

            public Long updateMemo(Long id, MemoRequestDto requestDto) {
                MemoRepository memoRepository = new MemoRepository(jdbcTemplate);
                // 해당 메모가 DB에 존재하는지 확인
                Memo memo = memoRepository.findById(id);
                if (memo != null) {
                    // memo 내용 수정
                    memoRepository.update(id, requestDto);

                    return id;
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }

            public Long deleteMemo(Long id) {
                MemoRepository memoRepository = new MemoRepository(jdbcTemplate);
                // 해당 메모가 DB에 존재하는지 확인
                Memo memo = memoRepository.findById(id);
                if (memo != null) {
                    // memo 삭제
                    memoRepository.delete(id);

                    return id;
                } else {
                    throw new IllegalArgumentException("선택한 메모는 존재하지 않습니다.");
                }
            }
        }
        ```

## 03. IoC(제어의 역전), DI(의존성 주입) 이해하기

- Spring의 IoC와 DI
    💡 IoC, DI… 누구냐 넌?
    - 여러분들이 웹 개발자가 되기 위해 Java 를 선택하여 열심히 배우고 난 후 자연스럽게 Spring 을 접했을 때 가장 먼저 듣게 되는 용어는 IoC, DI 입니다.
    - Spring 으로 개발을 입문한 분들이 처음에 가장 많이 오해하는 것이 바로 IoC 와 DI 가 Spring 에서 처음으로 만든 기능이라고 생각하는 것입니다.
    - IoC, DI는 객체지향의 SOLID 원칙 그리고 GoF 의 디자인 패턴과 같은 설계 원칙 및 디자인 패턴입니다.
    - 이 둘을 더 자세하게 구분해 보자면 IoC는 설계 원칙에 해당하고 DI는 디자인 패턴에 해당합니다.
    - 설계 원칙, 디자인 패턴 이 용어들도 낯설 수 있기 때문에 한번 요리에 비교해 보겠습니다.

    ### 김치 볶음밥 맛있게 만드는 방법 (설계 원칙)
    🧑‍🍳 맛있는 김치 볶음밥을 만들기 위한 원칙
    - 신선한 재료를 사용한다.
    - 신 김치를 사용한다.
    - 밥과 김치의 비율을 잘 맞춰야 한다.
    - 볶을 때 재료의 순서가 중요하다.

    ### 김치 볶음밥 레시피 (디자인 패턴)
    🍳 맛있는 김치 볶음밥을 만들기 위한 황금 레시피

    1. 오일을 두른 팬에 채썬 파를 볶아 파기름을 만든다.
    2. 준비한 햄을 넣고 볶다가, 간장 한스푼을 넣어 풍미를 낸다.
    3. 설탕에 버무린 김치를 넣고 함께 볶는다.
    4. 미리 식혀 둔 밥을 넣어 함께 볶는다.
    5. 참기름 한스푼을 넣어 마무리한다.

    ### 좋은 코드를 위한 Spring의 IoC와 DI
    🧑‍💻 좋은 코드란 무엇일까요?

    - 논리가 간단해야 한다.
    - 중복을 제거하고 표현을 명확하게 한다.
    - 코드를 처음 보는 사람도 쉽게 이해하고 수정할 수 있어야 한다.
    - 의존성을 최소화해야 한다.
    - 새로운 기능을 추가 하더라도 크게 구조의 변경이 없어야 한다.
    - 이렇듯 좋은 코드를 작성하기 위해서는 신경써야 할 부분이 정말 많습니다!
    - 따라서 Spring은 개발자가 Java를 사용하여 쉽게 좋은 코드를 작성할 수 있도록 도와주는 역할을 해줍니다.
    - 실생활에 비교해 보자면 요리도구까지 전부 들어있는 밀키트라고 할 수 있습니다.
    - 여기서 IoC와 DI는 좋은 코드 작성을 위한 Spring의 핵심 기술 중 하나라고 할 수 있습니다.
    - 아래는 [Spring Docs](https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-introduction) 에서 발췌해온 내용입니다.
    - Spring 의 핵심 기술을 소개하는 Docs에서 가장 처음으로 IoC 컨테이너에 대해서 설명하고 있습니다.
    - 그리고 IoC에 대해 ‘IoC는 DI로도 알려져 있다’ 라고 소개하고 있습니다.
    - 의역해보자면 ‘DI 패턴을 사용하여 IoC 설계 원칙을 구현하고 있다’ 라고 이해하시면 좋을 것 같습니다.
    - Spring Docs에서 소개하고 있는 IoC Container와 Bean에 대해서는 이후 강의에서 학습하도록 하겠습니다.


- 의존성이란?
    💡 먼저 DI 를 이해하려면 ‘의존성’에 대한 이해가 필요합니다!

    - 예를들어 우리가 다리를 다쳐서 목발을 사용하여 걷게 된다면 우리는 걷기 위해 목발에 의존하고 있는 것입니다. 즉, 우리는 목발에 의존성을 두게 되었다고 할 수 있습니다.
    - 코드를 통해 의존성에 대해 이해해보겠습니다.

    ### 강하게 결합되어있는 Consumer 와 Chicken

    ```java
    public class Consumer {

        void eat() {
            Chicken chicken = new Chicken();
            chicken.eat();
        }

        public static void main(String[] args) {
            Consumer consumer = new Consumer();
            consumer.eat();
        }
    }

    class Chicken {
        public void eat() {
            System.out.println("치킨을 먹는다.");
        }
    }
    ```

    - 위 코드에서 Consumer 와 Chicken 의 관계가 어떠한가요?
    - 코드가 실행되는데 있어서는 아무런 문제가 없지만 만약 Consumer 가 치킨이 아니라 피자를 먹고 싶어 한다면? 많은 수의 코드 변경이 불가피합니다.
    - 그렇다면 어떻게하면 결합을 약하게 할 수 있을까요?
    - Java 의 Interface 를 활용하면 이를 해결할 수 있습니다.

    ```java
    public class Consumer {

        void eat(Food food) {
            food.eat();
        }

        public static void main(String[] args) {
            Consumer consumer = new Consumer();
            consumer.eat(new Chicken());
            consumer.eat(new Pizza());
        }
    }

    interface Food {
        void eat();
    }

    class Chicken implements Food{
        @Override
        public void eat() {
            System.out.println("치킨을 먹는다.");
        }
    }

    class Pizza implements Food{
        @Override
        public void eat() {
            System.out.println("피자를 먹는다.");
        }
    }
    ```

    - 이처럼 Interface 다형성의 원리를 사용하여 구현하면 고객이 어떠한 음식을 요구하더라도 쉽게 대처할 수 있습니다.
    - 이러한 관계를 약한 결합 및 약한 의존성 이라고 할 수 있습니다.

- 주입이란?
    💡 그렇다면 주입은 무엇일까요?

    - 우리가 주사기를 통해 백신을 우리 몸속에 주입 하듯이
    - 코드에서의 주입도 마찬가지로 여러 방법을 통해 필요로 하는 객체를 해당 객체에 전달하는 것입니다.
    - 코드를 통해 코드에서의 주입에 대해 이해해보겠습니다.

    ### 필드에 직접 주입

    ```java
    public class Consumer {

        Food food;

        void eat() {
            this.food.eat();
        }

        public static void main(String[] args) {
            Consumer consumer = new Consumer();
            consumer.food = new Chicken();
            consumer.eat();

            consumer.food = new Pizza();
            consumer.eat();
        }
    }

    interface Food {
        void eat();
    }

    class Chicken implements Food{
        @Override
        public void eat() {
            System.out.println("치킨을 먹는다.");
        }
    }

    class Pizza implements Food{
        @Override
        public void eat() {
            System.out.println("피자를 먹는다.");
        }
    }
    ```

    - 이처럼 Food를 Consumer에 포함 시키고 Food에 필요한 객체를 주입받아 사용할 수 있습니다.

    ### 메서드를 통한 주입

    ```java
    public class Consumer {

        Food food;

        void eat() {
            this.food.eat();
        }

        public void setFood(Food food) {
            this.food = food;
        }

        public static void main(String[] args) {
            Consumer consumer = new Consumer();
            consumer.setFood(new Chicken());
            consumer.eat();

            consumer.setFood(new Pizza());
            consumer.eat();
        }
    }

    interface Food {
        void eat();
    }

    class Chicken implements Food{
        @Override
        public void eat() {
            System.out.println("치킨을 먹는다.");
        }
    }

    class Pizza implements Food{
        @Override
        public void eat() {
            System.out.println("피자를 먹는다.");
        }
    }
    ```

    - 이처럼 set 메서드를 사용하여 필요한 객체를 주입받아 사용할 수 있습니다.

    ### 생성자를 통한 주입

    ```java
    public class Consumer {

        Food food;

        public Consumer(Food food) {
            this.food = food;
        }

        void eat() {
            this.food.eat();
        }

        public static void main(String[] args) {
            Consumer consumer = new Consumer(new Chicken());
            consumer.eat();

            consumer = new Consumer(new Pizza());
            consumer.eat();
        }
    }

    interface Food {
        void eat();
    }

    class Chicken implements Food{
        @Override
        public void eat() {
            System.out.println("치킨을 먹는다.");
        }
    }

    class Pizza implements Food{
        @Override
        public void eat() {
            System.out.println("피자를 먹는다.");
        }
    }
    ```

    - 이처럼 생성자를 사용하여 필요한 객체를 주입받아 사용할 수 있습니다.

- 제어의 역전이란?
    💡 마지막으로 제어의 역전은 무엇일까요?

    - 이전에는 Consumer가 직접 Food를 만들어 먹었기 때문에 새로운 Food를 만들려면 추가적인 요리준비(코드변경)가 불가피했습니다.
        - 그렇기 때문에 이때는 제어의 흐름이 Consumer → Food 였습니다.
    - 이를 해결하기 위해 만들어진 Food를 Consumer에게 전달해주는 식으로 변경함으로써 Consumer는 추가적인 요리준비(코드변경) 없이 어느 Food가 되었든지 전부 먹을 수 있게 되었습니다.
        - 결과적으로 제어의 흐름이 Food → Consumer 로 역전 되었습니다.