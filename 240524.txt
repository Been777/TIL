# 내일배움캠프 240524 TIL
Java 27일차
Bean, 인증과 인가
-------------------------------------------------------------------------------

# Bean
## 01. Bean을 수동으로 등록하는 방법

- 프로젝트 생성
    - 프로젝트 준비하기
        1. IntelliJ를 실행합니다.
        2. New Project를 클릭합니다.
        3. 왼쪽 메뉴에서 "Spring Initializr”를 클릭하고 아래와 같이 설정합니다.
        4.  🚒**[중요] 꼭 다음 사항을 확인해주세요.**
            - Name: spring-auth
            - **Language: Java**
            - **Build system: Gradle - Groovy**
            - Group: com.sparta
            - **JDK: 17**
            - 프로젝트 경로(Location)는 자유롭게 설정하시면 됩니다.
        5. Next를 클릭합니다.
        6. Dependencies를 아래 사진과 같이 추가해주고 Create를 클릭합니다.
    - 프로젝트 설정추가
        - build.gradle
            - [코드 스니펫] build.gradle : Security 추가

                ```groovy
                // Security
                implementation 'org.springframework.boot:spring-boot-starter-security'
                ```

        - Security 기능 제한
            - [코드 스니펫] SpringAuthApplication

                ```java
                package com.sparta.springauth;

                import org.springframework.boot.SpringApplication;
                import org.springframework.boot.autoconfigure.SpringBootApplication;
                import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;

                @SpringBootApplication(exclude = SecurityAutoConfiguration.class) // Spring Security 인증 기능 제외
                public class SpringAuthApplication {

                    public static void main(String[] args) {
                        SpringApplication.run(SpringAuthApplication.class, args);
                    }

                }
                ```

- Bean 수동 등록이란?
    - @Component를 사용하면 @ComponentScan에 의해 자동으로 스캔되어 해당 클래스를 Bean으로 등록 해줍니다.
    - 일반적으로 @Component를 사용하여 Bean을 자동으로 등록하는 것이 좋습니다.
        - 프로젝트의 규모가 커질 수록 등록할 Bean들이 많아지기 때문에 자동등록을 사용하면 편리합니다.
        - 비즈니스 로직과 관련된 클래스들은 그 수가 많기 때문에 @Controller, @Service와 같은 애너테이션들을 사용해서 Bean으로 등록하고 관리하면 개발 생산성에 유리합니다.
    - 그렇다면 Bean 수동 등록은 언제 사용될까요?
    - 기술적인 문제나 공통적인 관심사를 처리할 때 사용하는 객체들을 수동으로 등록하는 것이 좋습니다.
        - 공통 로그처리와 같은 비즈니스 로직을 지원하기 위한 부가 적이고 공통적인 기능들을 기술 지원 Bean이라 부르고 수동등록 합니다.
        - 비즈니스 로직 Bean 보다는 그 수가 적기 때문에 수동으로 등록하기 부담스럽지 않습니다.
        - 또한 수동등록된 Bean에서 문제가 발생했을 때 해당 위치를 파악하기 쉽다는 장점이 있습니다.

- Bean 수동 등록하는 방법

    ```java
    @Configuration
    public class PasswordConfig {

        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
    ```

    - Bean으로 등록하고자하는 객체를 반환하는 메서드를 선언하고 @Bean을 설정합니다.
    - Bean을 등록하는 메서드가 속한 해당 클래스에 @Configuration을 설정합니다.
    - Spring 서버가 뜰 때 Spring IoC 컨테이너에 'Bean'으로 저장됩니다.

        ```java
        // 1. @Bean 설정된 메서드 호출
        PasswordEncoder passwordEncoder = passwordConfig.passwordEncoder();

        // 2. Spring IoC 컨테이너에 빈 (passwordEncoder) 저장
        // passwordEncoder -> Spring IoC 컨테이너
        ```

        - 'Bean' 이름: @Bean 이 설정된 메서드명
            - public PasswordEncoder **passwordEncoder()** {..} → **passwordEncoder**

- Bean 등록해보기
    - 비밀번호를 암호화할 때 사용하는 PasswordEncoder의 구현체 BCryptPasswordEncoder를 Bean으로 수동등록 해보겠습니다.
    - [코드 스니펫] PasswordConfig

        ```java
        package com.sparta.springauth.config;

        import org.springframework.context.annotation.Bean;
        import org.springframework.context.annotation.Configuration;
        import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
        import org.springframework.security.crypto.password.PasswordEncoder;

        @Configuration
        public class PasswordConfig {

            @Bean
            public PasswordEncoder passwordEncoder() {
                return new BCryptPasswordEncoder();
            }
        }
        ```

    - 등록한 passwordEncoder ‘Bean’을 사용하여 문자열을 암호화 해보겠습니다.
    - [코드 스니펫] PasswordEncoderTest

        ```java
        package com.sparta.springauth;

        import org.junit.jupiter.api.DisplayName;
        import org.junit.jupiter.api.Test;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.security.crypto.password.PasswordEncoder;

        @SpringBootTest
        public class PasswordEncoderTest {

            @Autowired
            PasswordEncoder passwordEncoder;

            @Test
            @DisplayName("수동 등록한 passwordEncoder를 주입 받아와 문자열 암호화")
            void test1() {
                String password = "Robbie's password";

                // 암호화
                String encodePassword = passwordEncoder.encode(password);
                System.out.println("encodePassword = " + encodePassword);

                String inputPassword = "Robbie";

                // 복호화를 통해 암호화된 비밀번호와 비교
                boolean matches = passwordEncoder.matches(inputPassword, encodePassword);
                System.out.println("matches = " + matches); // 암호화할 때 사용된 값과 다른 문자열과 비교했기 때문에 false
            }
        }
        ```

## 02. 같은 타입의 Bean이 2개라면?

- 같은 타입 Bean 등록
    1. Food Interface
        - [코드 스니펫] food > Food

            ```java
            package com.sparta.springauth.food;

            public interface Food {
                void eat();
            }
            ```

    2. Chicken
        - [코드 스니펫] food > Chicken

            ```java
            package com.sparta.springauth.food;

            import org.springframework.stereotype.Component;

            @Component
            public class Chicken implements Food {
                @Override
                public void eat() {
                    System.out.println("치킨을 먹습니다.");
                }
            }
            ```

    3. Pizza
        - [코드 스니펫] food > Pizza

            ```java
            package com.sparta.springauth.food;

            import org.springframework.stereotype.Component;

            @Component
            public class Pizza implements Food {
                @Override
                public void eat() {
                    System.out.println("피자를 먹습니다.");
                }
            }
            ```

    - Food 타입의 Bean 객체 Chicken, Pizza를 등록했습니다.

    ```java
    @SpringBootTest
    public class BeanTest {

        @Autowired
        Food food;

    }
    ```

    - 테스트를 위해 테스트 코드를 작성했습니다.
    - 이때, `Food food;` 필드에 @Autowired를 사용하여 Bean 객체를 주입려고 시도합니다.
    - 주입을 할 수 없다는 오류가 발생했습니다.
    - 해석해보자면 “**Food** 타입의 **Bena** 객체가 **하나 이상** 있습니다. **“** 라고 알려주고 있습니다.
    - 즉, food 필드에 Bean을 주입해줘야하는데 같은 타입의 Bean 객체가 하나 이상이기 때문에 어떤 Bean을 등록해줘야할지 몰라 오류가 발생한 것입니다.
    - 어떻게 하면 이를 해결할 수 있을지 확인해보겠습니다.

- 등록된 Bean 이름 명시하기

    ```java
    @SpringBootTest
    public class BeanTest {

        @Autowired
        Food pizza;

        @Autowired
        Food chicken;

    }
    ```

    - 이렇게 등록된 Bean 이름 pizza, chicken을 정확하게 명시해주면 해결할 수 있습니다.
    - 여기서 우리가 알 수 있는 점은 @Autowired가 기본적으로는 Bean Type(Food)으로 DI를 지원하며 연결이 되지않을 경우 Bean Name(pizza, chicken)으로 찾는 다는 것을 알 수 있습니다.

- @Primary 사용하기

    ```java
    @Component
    @Primary
    public class Chicken implements Food {
        @Override
        public void eat() {
            System.out.println("치킨을 먹습니다.");
        }
    }
    ```

    - Chicken 클래스에 @Primary를 추가합니다.

    ```java
    @SpringBootTest
    public class BeanTest {
        @Autowired
        Food food;
    }
    ```

    - @Primary가 추가되면 같은 타입의 Bean이 여러 개 있더라도 우선 @Primary가 설정된 Bean 객체를 주입 해줍니다.

- @Qualifier 사용하기

    ```java
    @Component
    @Qualifier("pizza")
    public class Pizza implements Food {
        @Override
        public void eat() {
            System.out.println("피자를 먹습니다.");
        }
    }
    ```

    - Pizza 클래스에 `@Qualifier("pizza")` 를 추가합니다.

    ```java
    @SpringBootTest
    public class BeanTest {

        @Autowired
        @Qualifier("pizza")
        Food food;
    }
    ```

    - 주입하고자하는 필드에도 `@Qualifier("pizza")` 를 추가해주면 해당 Bean 객체가 주입됩니다.

    ```java
    @SpringBootTest
    public class BeanTest {

        @Autowired
        @Qualifier("pizza")
        Food food;

        @Test
        @DisplayName("Primary 와 Qualifier 우선순위 확인")
        void test1() {
            // 현재 Chicken 은 Primary 가 적용된 상태
            // Pizza는 Qualifier 가 추가된 상태입니다.
            food.eat();
        }
    }
    ```

    - 같은 타입의 Bean들에 Qualifier와 Primary가 동시에 적용되어있다면 Qualifier의 우선순위가 더 높습니다.
    - 하지만 Qualifier는 적용하기 위해서 주입 받고자하는 곳에 해당 Qualifier를 반드시 추가해야합니다.
    - 따라서 같은 타입의 Bean이 여러 개 있을 때는 범용적으로 사용되는 Bean 객체에는 Primary를 설정하고 지엽적으로 사용되는 Bean 객체에는 Qualifier를 사용하는 것이 좋습니다.