# 내일배움캠프 240614 TIL
Java 44일차
JPA(8~10)
-------------------------------------------------------------------------------

## 08. N 대 1 관계
- `@ManyToOne`
    - `@ManyToOne` 애너테이션은 N 대 1 관계를 맺어주는 역할을 합니다.
    - 음식 Entity와 고객 Entity가 N 대 1 관계라 가정하여 관계를 맺어보겠습니다.
    
- 단방향 관계
    - 음식 Entity가 N의 관계로 외래 키의 주인
        - 음식
            
            ```java
            @Entity
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToOne
                @JoinColumn(name = "user_id")
                private User user;
            }
            ```
            
        - 고객
            
            ```java
            @Entity
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            }
            ```
                
- 양방향 관계
    - 양방향 참조를 위해 고객 Entity에서 Java 컬렌션을 사용하여 음식 Entity 참조
        - 음식 Entity가 N의 관계로 외래 키의 주인
        - 음식
            
            ```java
            @Entity
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToOne
                @JoinColumn(name = "user_id")
                private User user;
            }
            ```
            
        - 고객
            
            ```java
            @Entity
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            
                @OneToMany(mappedBy = "user")
                private List<Food> foodList = new ArrayList<>();
            }
            ```
            
- 연습하기
    - [코드 스니펫] ManyToOneTest
        
        ```java
        package com.sparta.jpaadvance.relation;
        
        import com.sparta.jpaadvance.repository.FoodRepository;
        import com.sparta.jpaadvance.repository.UserRepository;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.transaction.annotation.Transactional;
        
        @Transactional
        @SpringBootTest
        public class ManyToOneTest {
        
            @Autowired
            UserRepository userRepository;
            @Autowired
            FoodRepository foodRepository;
        
        }
        ```
        
    - 단방향
        - [코드 스니펫] Food Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToOne
                @JoinColumn(name = "user_id")
                private User user;
            }
            ```
            
        - [코드 스니펫] User Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            }
            ```
            
    - 단방향 테스트
        - [코드 스니펫] ManyToOne 단방향 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("N대1 단방향 테스트")
            void test1() {
                User user = new User();
                user.setName("Robbie");
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
                food.setUser(user); // 외래 키(연관 관계) 설정
            
                Food food2 = new Food();
                food2.setName("양념 치킨");
                food2.setPrice(20000);
                food2.setUser(user); // 외래 키(연관 관계) 설정
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            }
            ```
            
    - 양방향
        - [코드 스니펫] 양방향 User Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            
                @OneToMany(mappedBy = "user")
                private List<Food> foodList = new ArrayList<>();
            
                public void addFoodList(Food food) {
                    this.foodList.add(food);
                    food.setUser(this); // 외래 키(연관 관계) 설정
                }
            }
            ```
            
    - 양방향 테스트
        - [코드 스니펫] ManyToOne 양방향 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("N대1 양방향 테스트 : 외래 키 저장 실패")
            void test2() {
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
            
                Food food2 = new Food();
                food2.setName("양념 치킨");
                food2.setPrice(20000);
            
                // 외래 키의 주인이 아닌 User 에서 Food 를 저장해보겠습니다.
                User user = new User();
                user.setName("Robbie");
                user.getFoodList().add(food);
                user.getFoodList().add(food2);
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            
                // 확인해 보시면 user_id 값이 들어가 있지 않은 것을 확인하실 수 있습니다.
            }
            
            @Test
            @Rollback(value = false)
            @DisplayName("N대1 양방향 테스트 : 외래 키 저장 실패 -> 성공")
            void test3() {
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
            
                Food food2 = new Food();
                food2.setName("양념 치킨");
                food2.setPrice(20000);
            
                // 외래 키의 주인이 아닌 User 에서 Food 를 쉽게 저장하기 위해 addFoodList() 메서드 생성하고
                // 해당 메서드에 외래 키(연관 관계) 설정 food.setUser(this); 추가
                User user = new User();
                user.setName("Robbie");
                user.addFoodList(food);
                user.addFoodList(food2);
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            }
            
            @Test
            @Rollback(value = false)
            @DisplayName("N대1 양방향 테스트")
            void test4() {
                User user = new User();
                user.setName("Robbert");
            
                Food food = new Food();
                food.setName("고구마 피자");
                food.setPrice(30000);
                food.setUser(user); // 외래 키(연관 관계) 설정
            
                Food food2 = new Food();
                food2.setName("아보카도 피자");
                food2.setPrice(50000);
                food2.setUser(user); // 외래 키(연관 관계) 설정
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            }
            ```
            
    - 조회
        - [코드 스니펫] ManyToOne 조회 테스트
            
            ```java
            @Test
            @DisplayName("N대1 조회 : Food 기준 user 정보 조회")
            void test5() {
                Food food = foodRepository.findById(1L).orElseThrow(NullPointerException::new);
                // 음식 정보 조회
                System.out.println("food.getName() = " + food.getName());
            
                // 음식을 주문한 고객 정보 조회
                System.out.println("food.getUser().getName() = " + food.getUser().getName());
            }
            
            @Test
            @DisplayName("N대1 조회 : User 기준 food 정보 조회")
            void test6() {
                User user = userRepository.findById(1L).orElseThrow(NullPointerException::new);
                // 고객 정보 조회
                System.out.println("user.getName() = " + user.getName());
            
                // 해당 고객이 주문한 음식 정보 조회
                List<Food> foodList = user.getFoodList();
                for (Food food : foodList) {
                    System.out.println("food.getName() = " + food.getName());
                    System.out.println("food.getPrice() = " + food.getPrice());
                }
            }
            ```
            
## 09. 1 대 N 관계

- `@OneToMany`
    - `@OneToMany` 애너테이션은 1 대 N 관계를 맺어주는 역할을 합니다.
    - 음식 Entity와 고객 Entity가 1 대 N 관계라 가정하여 관계를 맺어보겠습니다.
    
- 단방향 관계 
    - 외래 키를 관리하는 주인은 음식 Entity이지만 실제 외래 키는 고객 Entity가 가지고 있습니다.
        - 1 : N에서 N 관계의 테이블이 외래 키를 가질 수 있기 때문에 외래 키는 N 관계인 users 테이블에 외래 키 컬럼을 만들어 추가하지만 외래 키의 주인인 음식 Entity를 통해 관리합니다.
        - 음식
            
            ```java
            @Entity
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @OneToMany
                @JoinColumn(name = "food_id") // users 테이블에 food_id 컬럼
                private List<User> userList = new ArrayList<>();
            }
            ```
            
        - 고객
            
            ```java
            @Entity
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            }
            ```
                 
    - 외래 키를 음식 Entity가 직접 가질 수 있다면 INSERT 발생 시 한번에 처리할 수 있지만 실제 DB에서 외래 키를 고객 테이블이 가지고 있기 때문에 추가적인 UPDATE가 발생된다는 단점이 존재합니다.
    
- 양방향 관계
    - 1 대 N 관계에서는 일반적으로 양방향 관계가 존재하지 않습니다.
    - 1 대 N 관계에서 양방향 관계를 맺으려면 음식 Entity를 외래 키의 주인으로 정해주기 위해 고객 Entity에서 mappedBy 옵션을 사용해야 하지만 @ManyToOne 애너테이션은 mappedBy 속성을 제공하지 않습니다.
    
    ```java
    @Entity
    @Table(name = "users")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;
    
    		@ManyToOne
    		@JoinColumn(name = "food_id", insertable = false, updatable = false)
    		private Food food;
    }
    ```
    
    - N 관계의 Entity인 고객 Entity에서 @JoinColum의 insertable 과 updatable 옵션을 false로 설정하여 양쪽으로 JOIN 설정을 하면 양방향처럼 설정할 수는 있습니다.
          
- 연습하기
    - [코드 스니펫] OneToManyTest
        
        ```java
        package com.sparta.jpaadvance.relation;
        
        import com.sparta.jpaadvance.repository.FoodRepository;
        import com.sparta.jpaadvance.repository.UserRepository;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.transaction.annotation.Transactional;
        
        @Transactional
        @SpringBootTest
        public class OneToManyTest {
        
            @Autowired
            UserRepository userRepository;
            @Autowired
            FoodRepository foodRepository;
        
        }
        ```
        
    - 단방향
        - [코드 스니펫] Food Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @OneToMany
                @JoinColumn(name = "food_id") // users 테이블에 food_id 컬럼
                private List<User> userList = new ArrayList<>();
            }
            ```
            
        - [코드 스니펫] User Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            }
            ```
            
    - 단방향 테스트
        - [코드 스니펫]  OneToMany 단방향 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("1대N 단방향 테스트")
            void test1() {
                User user = new User();
                user.setName("Robbie");
            
                User user2 = new User();
                user2.setName("Robbert");
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
                food.getUserList().add(user); // 외래 키(연관 관계) 설정
                food.getUserList().add(user2); // 외래 키(연관 관계) 설정
            
                userRepository.save(user);
                userRepository.save(user2);
                foodRepository.save(food);
            
                // 추가적인 UPDATE 쿼리 발생을 확인할 수 있습니다.
            }
            ```
            
    - 조회
        - [코드 스니펫] OneToMany 조회 테스트
            
            ```java
            @Test
            @DisplayName("1대N 조회 테스트")
            void test2() {
                Food food = foodRepository.findById(1L).orElseThrow(NullPointerException::new);
                System.out.println("food.getName() = " + food.getName());
            
                // 해당 음식을 주문한 고객 정보 조회
                List<User> userList = food.getUserList();
                for (User user : userList) {
                    System.out.println("user.getName() = " + user.getName());
                }
            }
            ```
            
## 10. N 대 M 관계

- `@ManyToMany`
    - `@ManyToMany` 애너테이션은 N 대 M 관계를 맺어주는 역할을 합니다.
    - 음식 Entity와 고객 Entity가 N 대 M 관계라 가정하여 관계를 맺어보겠습니다.
    
- 단방향 관계  
    - N : M 관계를 풀어내기 위해 중간 테이블(orders)을 생성하여 사용합니다.
        - 음식 Entity가 외래 키의 주인
        - 음식
            
            ```java
            @Entity
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToMany
                @JoinTable(name = "orders", // 중간 테이블 생성
                joinColumns = @JoinColumn(name = "food_id"), // 현재 위치인 Food Entity 에서 중간 테이블로 조인할 컬럼 설정
                inverseJoinColumns = @JoinColumn(name = "user_id")) // 반대 위치인 User Entity 에서 중간 테이블로 조인할 컬럼 설정
                private List<User> userList = new ArrayList<>();
            }
            ```
            
        - 고객
            
            ```java
            @Entity
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            }
            ```
              
    - 생성되는 중간 테이블을 컨트롤하기 어렵기 때문에 추후에 중간 테이블의 변경이 발생할 경우 문제가 발생할 가능성이 있습니다.
    
- 양방향 관계
    - 음식 Entity가 외래 키의 주인
    - 음식
        
        ```java
        @Entity
        @Table(name = "food")
        public class Food {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            private String name;
            private double price;
        
            @ManyToMany
            @JoinTable(name = "orders", // 중간 테이블 생성
            joinColumns = @JoinColumn(name = "food_id"), // 현재 위치인 Food Entity 에서 중간 테이블로 조인할 컬럼 설정
            inverseJoinColumns = @JoinColumn(name = "user_id")) // 반대 위치인 User Entity 에서 중간 테이블로 조인할 컬럼 설정
            private List<User> userList = new ArrayList<>();
        }
        ```
        
    - 고객
        
        ```java
        @Entity
        @Table(name = "users")
        public class User {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            private String name;
        
            @ManyToMany(mappedBy = "userList")
            private List<Food> foodList = new ArrayList<>();
        }
        ```
    
    - 반대 방향인 고객 Entity에 `@ManyToMany` 로 음식 Entity를 연결하고 mappedBy 옵션을 설정하여 외래 키의 주인을 설정하면 양방향 관계 맺음이 가능합니다.
          
- 연습하기
    - [코드 스니펫] ManyToManyTest
        
        ```java
        package com.sparta.jpaadvance.relation;
        
        import com.sparta.jpaadvance.repository.FoodRepository;
        import com.sparta.jpaadvance.repository.UserRepository;
        import org.springframework.beans.factory.annotation.Autowired;
        import org.springframework.boot.test.context.SpringBootTest;
        import org.springframework.transaction.annotation.Transactional;
        
        @Transactional
        @SpringBootTest
        public class ManyToManyTest {
        
            @Autowired
            UserRepository userRepository;
            @Autowired
            FoodRepository foodRepository;
            
        }
        ```
        
    - 단방향
        - [코드 스니펫] Food Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToMany
                @JoinTable(name = "orders", // 중간 테이블 생성
                        joinColumns = @JoinColumn(name = "food_id"), // 현재 위치인 Food Entity 에서 중간 테이블로 조인할 컬럼 설정
                        inverseJoinColumns = @JoinColumn(name = "user_id")) // 반대 위치인 User Entity 에서 중간 테이블로 조인할 컬럼 설정
                private List<User> userList = new ArrayList<>();
            }
            ```
            
    - 단방향 테스트
        - [코드 스니펫]  ManyToMany 단방향 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("N대M 단방향 테스트")
            void test1() {
            
                User user = new User();
                user.setName("Robbie");
            
                User user2 = new User();
                user2.setName("Robbert");
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
                food.getUserList().add(user);
                food.getUserList().add(user2);
            
                userRepository.save(user);
                userRepository.save(user2);
                foodRepository.save(food);
            
                // 자동으로 중간 테이블 orders 가 create 되고 insert 됨을 확인할 수 있습니다.
            }
            ```

    - 양방향
        - [코드 스니펫] 양방향 Food Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @ManyToMany
                @JoinTable(name = "orders", // 중간 테이블 생성
                        joinColumns = @JoinColumn(name = "food_id"), // 현재 위치인 Food Entity 에서 중간 테이블로 조인할 컬럼 설정
                        inverseJoinColumns = @JoinColumn(name = "user_id")) // 반대 위치인 User Entity 에서 중간 테이블로 조인할 컬럼 설정
                private List<User> userList = new ArrayList<>();
            
                public void addUserList(User user) {
                    this.userList.add(user); // 외래 키(연관 관계) 설정
                    user.getFoodList().add(this);
                }
            }
            ```
            
        - [코드 스니펫] 양방향 User Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            
                @ManyToMany(mappedBy = "userList")
                private List<Food> foodList = new ArrayList<>();
            
                public void addFoodList(Food food) {
                    this.foodList.add(food);
                    food.getUserList().add(this); // 외래 키(연관 관계) 설정
                }
            }
            ```
            
    - 양방향 테스트
        - [코드 스니펫]  ManyToMany 양방향 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("N대M 양방향 테스트 : 외래 키 저장 실패")
            void test2() {
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
            
                Food food2 = new Food();
                food2.setName("양념 치킨");
                food2.setPrice(20000);
            
                // 외래 키의 주인이 아닌 User 에서 Food 를 저장해보겠습니다.
                User user = new User();
                user.setName("Robbie");
                user.getFoodList().add(food);
                user.getFoodList().add(food2);
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            
                // 확인해 보시면 orders 테이블에 food_id, user_id 값이 들어가 있지 않은 것을 확인하실 수 있습니다.
            }
            
            @Test
            @Rollback(value = false)
            @DisplayName("N대M 양방향 테스트 : 외래 키 저장 실패 -> 성공")
            void test3() {
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
            
                Food food2 = new Food();
                food2.setName("양념 치킨");
                food2.setPrice(20000);
            
                // 외래 키의 주인이 아닌 User 에서 Food 를 쉽게 저장하기 위해 addFoodList() 메서드를 생성해서 사용합니다.
                // 외래 키(연관 관계) 설정을 위해 Food 에서 userList 를 호출해 user 객체 자신을 add 합니다.
                User user = new User();
                user.setName("Robbie");
                user.addFoodList(food);
                user.addFoodList(food2);
            
                userRepository.save(user);
                foodRepository.save(food);
                foodRepository.save(food2);
            }
            
            @Test
            @Rollback(value = false)
            @DisplayName("N대M 양방향 테스트")
            void test4() {
            
                User user = new User();
                user.setName("Robbie");
            
                User user2 = new User();
                user2.setName("Robbert");
            
                Food food = new Food();
                food.setName("아보카도 피자");
                food.setPrice(50000);
                food.getUserList().add(user); // 외래 키(연관 관계) 설정
                food.getUserList().add(user2); // 외래 키(연관 관계) 설정
            
                Food food2 = new Food();
                food2.setName("고구마 피자");
                food2.setPrice(30000);
                food2.getUserList().add(user); // 외래 키(연관 관계) 설정
            
                userRepository.save(user);
                userRepository.save(user2);
                foodRepository.save(food);
                foodRepository.save(food2);
            
                // User 를 통해 food 의 정보 조회
                System.out.println("user.getName() = " + user.getName());
            
                List<Food> foodList = user.getFoodList();
                for (Food f : foodList) {
                    System.out.println("f.getName() = " + f.getName());
                    System.out.println("f.getPrice() = " + f.getPrice());
                }
            
                // 외래 키의 주인이 아닌 User 객체에 Food 의 정보를 넣어주지 않아도 DB 저장에는 문제가 없지만
                // 이처럼 User 를 사용하여 food 의 정보를 조회할 수는 없습니다.
            }
            
            @Test
            @Rollback(value = false)
            @DisplayName("N대M 양방향 테스트 : 객체와 양방향의 장점 활용")
            void test5() {
            
                User user = new User();
                user.setName("Robbie");
            
                User user2 = new User();
                user2.setName("Robbert");
            
                // addUserList() 메서드를 생성해 user 정보를 추가하고
                // 해당 메서드에 객체 활용을 위해 user 객체에 food 정보를 추가하는 코드를 추가합니다. user.getFoodList().add(this);
                Food food = new Food();
                food.setName("아보카도 피자");
                food.setPrice(50000);
                food.addUserList(user);
                food.addUserList(user2);
            
                Food food2 = new Food();
                food2.setName("고구마 피자");
                food2.setPrice(30000);
                food2.addUserList(user);
            
                userRepository.save(user);
                userRepository.save(user2);
                foodRepository.save(food);
                foodRepository.save(food2);
            
                // User 를 통해 food 의 정보 조회
                System.out.println("user.getName() = " + user.getName());
            
                List<Food> foodList = user.getFoodList();
                for (Food f : foodList) {
                    System.out.println("f.getName() = " + f.getName());
                    System.out.println("f.getPrice() = " + f.getPrice());
                }
            }
            ```

    - 조회
        - [코드 스니펫] ManyToMany 조회 테스트
            
            ```java
            @Test
            @DisplayName("N대M 조회 : Food 기준 user 정보 조회")
            void test6() {
                Food food = foodRepository.findById(1L).orElseThrow(NullPointerException::new);
                // 음식 정보 조회
                System.out.println("food.getName() = " + food.getName());
            
                // 음식을 주문한 고객 정보 조회
                List<User> userList = food.getUserList();
                for (User user : userList) {
                    System.out.println("user.getName() = " + user.getName());
                }
            }
            
            @Test
            @DisplayName("N대M 조회 : User 기준 food 정보 조회")
            void test7() {
                User user = userRepository.findById(1L).orElseThrow(NullPointerException::new);
                // 고객 정보 조회
                System.out.println("user.getName() = " + user.getName());
            
                // 해당 고객이 주문한 음식 정보 조회
                List<Food> foodList = user.getFoodList();
                for (Food food : foodList) {
                    System.out.println("food.getName() = " + food.getName());
                    System.out.println("food.getPrice() = " + food.getPrice());
                }
            }
            ```

- 중간 테이블
    - 중간 테이블 orders를 직접 생성하여 관리하면 변경 발생 시 컨트롤하기 쉽기 때문에 확장성에 좋습니다.
    
    - 음식
        
        ```java
        @Entity
        @Table(name = "food")
        public class Food {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            private String name;
            private double price;
        
            @OneToMany(mappedBy = "food")
            private List<Order> orderList = new ArrayList<>();
        }
        ```
        
    - 고객
        
        ```java
        @Entity
        @Table(name = "users")
        public class User {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
            private String name;
        
            @OneToMany(mappedBy = "user")
            private List<Order> orderList = new ArrayList<>();
        }
        ```
        
    - 주문
        
        ```java
        @Entity
        @Table(name = "orders")
        public class Order {
            @Id
            @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;
        
            @ManyToOne
            @JoinColumn(name = "food_id")
            private Food food;
        
            @ManyToOne
            @JoinColumn(name = "user_id")
            private User user;
        }
        ```
        
    
    - 연습하기
        - [코드 스니펫] 중간 테이블 Food Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "food")
            public class Food {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
                private double price;
            
                @OneToMany(mappedBy = "food")
                private List<Order> orderList = new ArrayList<>();
            }
            ```
            
        - [코드 스니펫] 중간 테이블 User Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            import java.util.ArrayList;
            import java.util.List;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "users")
            public class User {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
                private String name;
            
                @OneToMany(mappedBy = "user")
                private List<Order> orderList = new ArrayList<>();
            }
            ```
            
        - [코드 스니펫] 중간 테이블 Order Entity
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "orders")
            public class Order {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
            
                @ManyToOne
                @JoinColumn(name = "food_id")
                private Food food;
            
                @ManyToOne
                @JoinColumn(name = "user_id")
                private User user;
            }
            ```
            
        - [코드 스니펫] OrderTest
            
            ```java
            package com.sparta.jpaadvance.relation;
            
            import com.sparta.jpaadvance.repository.FoodRepository;
            import com.sparta.jpaadvance.repository.OrderRepository;
            import com.sparta.jpaadvance.repository.UserRepository;
            import org.springframework.beans.factory.annotation.Autowired;
            import org.springframework.boot.test.context.SpringBootTest;
            import org.springframework.transaction.annotation.Transactional;
            
            @Transactional
            @SpringBootTest
            public class OrderTest {
            
                @Autowired
                UserRepository userRepository;
                @Autowired
                FoodRepository foodRepository;
                @Autowired
                OrderRepository orderRepository;
            
            }
            ```

    - 중간 테이블 테스트
        - [코드 스니펫]  중간 테이블 테스트
            
            ```java
            @Test
            @Rollback(value = false)
            @DisplayName("중간 테이블 Order Entity 테스트")
            void test1() {
            
                User user = new User();
                user.setName("Robbie");
            
                Food food = new Food();
                food.setName("후라이드 치킨");
                food.setPrice(15000);
            
                // 주문 저장
                Order order = new Order();
                order.setUser(user); // 외래 키(연관 관계) 설정
                order.setFood(food); // 외래 키(연관 관계) 설정
            
                userRepository.save(user);
                foodRepository.save(food);
                orderRepository.save(order);
            }
            
            @Test
            @DisplayName("중간 테이블 Order Entity 조회")
            void test2() {
                // 1번 주문 조회
                Order order = orderRepository.findById(1L).orElseThrow(NullPointerException::new);
            
                // order 객체를 사용하여 고객 정보 조회
                User user = order.getUser();
                System.out.println("user.getName() = " + user.getName());
            
                // order 객체를 사용하여 음식 정보 조회
                Food food = order.getFood();
                System.out.println("food.getName() = " + food.getName());
                System.out.println("food.getPrice() = " + food.getPrice());
            }
            ```
            
        
    - 중간 테이블 Order에 주문일 컬럼 추가
        - [코드 스니펫] 주문일 추가
            
            ```java
            package com.sparta.jpaadvance.entity;
            
            import jakarta.persistence.*;
            import lombok.Getter;
            import lombok.Setter;
            import org.springframework.data.annotation.CreatedDate;
            import org.springframework.data.jpa.domain.support.AuditingEntityListener;
            
            import java.time.LocalDateTime;
            
            @Entity
            @Getter
            @Setter
            @Table(name = "orders")
            @EntityListeners(AuditingEntityListener.class)
            public class Order {
                @Id
                @GeneratedValue(strategy = GenerationType.IDENTITY)
                private Long id;
            
                @ManyToOne
                @JoinColumn(name = "food_id")
                private Food food;
            
                @ManyToOne
                @JoinColumn(name = "user_id")
                private User user;
            
                @CreatedDate
                @Temporal(TemporalType.TIMESTAMP)
                private LocalDateTime orderDate;
            }
            ```
