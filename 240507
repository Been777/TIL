# 내일배움캠프 240507 TIL
Java 13일차
필드와 메서드
---------------------------------------------

## 객체의 속성 : 필드

- 필드란?

    📌 필드는 객체의 데이터를 저장하는 역할을 합니다.

    - 객체의 필드는 크게 고유한 데이터, 상태 데이터, 객체 데이터로 분류할 수 있습니다.
    - 이처럼 자동차 객체는 4개의 고유한 데이터와 3개의 상태 데이터 그리고 3개의 객체 데이터를 가질 수 있습니다.
        - 우리가 처음 소프트웨어의 부품을 객체라 표현한다고 배웠습니다.
        - 이 3개의 객체 데이터를 자동차를 만들기 위한 부품 데이터라고 이해해도 좋습니다.

    - **자동차 클래스**
        - 실제로 위에서 배운 필드를 정의하여 자동차 클래스를 만들어 보겠습니다.
            - 일단 먼저 자동차를 만들기 위한 부품인 타이어, 차 문, 핸들 클래스를 만들겠습니다.
                - 부품 데이터
                    - [코드 스니펫] 타이어 클래스
                        public class Tire {
                            public Tire() {}
                        }

                    - [코드 스니펫] 차문 클래스
                        public class Door {
                            public Door() {}
                        }

                    - [코드 스니펫] 핸들 클래스
                        public class Handle {
                            public Handle() {}
                        }

            - 부품 데이터와 나머지 고유한 데이터, 상태 데이터를 포함한 자동차 클래스를 만들겠습니다.
            - **[코드스니펫]** 자동차 클래스

                public class Car {

                    String company; // 자동차 회사
                    String model; // 자동차 모델
                    String color; // 자동차 색상
                    double price; // 자동차 가격

                    double speed;  // 자동차 속도 , km/h
                    char gear; // 기어의 상태, P,R,N,D
                    boolean lights; // 자동차 조명의 상태

                    Tire tire;
                    Door door;
                    Handle handle;

                    public Car() {} // 기본 생성자

                    double gasPedal(double kmh) {
                        speed = kmh;
                        return speed;
                    }

                    double brakePedal() {
                        speed = 0;
                        return speed;
                    }

                    char changeGear(char type) {
                        gear = type;
                        return gear;
                    }

                    boolean onOffLights() {
                        lights = !lights;
                        return lights;
                    }

                		void horn() {
                		    System.out.println("빵빵");
                		}
                }

- 필드의 초기값과 초기화

📌 우리가 정의하여 선언한 클래스의 필드들은 기본적으로 초기값을 제공하지 않을 경우 객체가 생성될 때 자동으로 기본값으로 초기화됩니다.

    - 초기값을 제공하는 방법은 ‘필드 타입 필드명 = 값;’ 이렇게 직접 초기화할 수 있습니다.
        - `String model = "Gv80";
        필드 타입별 기본값
        ----------------
        데이터 타입
        기본값
        ----------------
        byte
        0
        ----------------
        char
        \u0000 (공백)
        ----------------
        short
        0
        ----------------
        int
        0
        ----------------
        long
        0L
        ----------------
        float
        0.0F
        ----------------
        double
        0.0
        ----------------
        boolean
        false
        ----------------
        배열
        null
        ----------------
        클래스
        null
        ----------------
        인터페이스
        null
        ----------------

-필드 사용방법

    📌 ‘필드를 사용한다’라는 의미는 필드의 값을 변경하거나 읽는 것을 의미합니다.

    - 우리가 클래스에 필드를 정의하여 선언했다고 해서 바로 사용할 수 있는 것은 아닙니다.
    - 클래스는 설계도일 뿐 실제로 필드의 데이터를 가지고 있는 것은 객체입니다.
    - 따라서 객체를 생성한 후에 필드를 사용할 수 있습니다.

    - 외부 접근
        - `Car car = new Car();`
            - 이렇게 객체를 생성했다면 우리는 참조 변수 car를 이용하여 외부에서 객체 내부의 필드에 접근하여 사용할 수 있습니다.
            - 이때 객체의 내부 필드에 접근하는 방법은 도트(.) 연산자를 사용하면 됩니다.
                - `car.color = "blue";`
    - 내부 접근
        - 도트 연산자를 사용하여 외부에서 객체 내부에 접근할 수 있을 뿐만 아니라 객체 내부 메서드에서도 내부 필드에 접근할 수 있습니다.

            double brakePedal() {
                speed = 0;
                return speed;
            }

            - 이처럼 `brakePedal()` 메서드 내부에서 객체의 필드 speed를 바로 호출해서 사용할 수 있습니다.