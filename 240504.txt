# 내일배움캠프 240504 TIL
Java 10일차
다차원 배열, 컬랙션
---------------------------------------------

- 다차원 배열🗳️🗳️
     2차원 배열(2열 배열), 순회
      - 지금까지 학습한, 1열로 구성된 분류통🗳️을 배열이라고 하고, 이것은 말 그대로 1열로 되어있기 때문에 1열배열 즉, 1차원 배열이라고도 부릅니다.
      - 1열 배열을 위로 쌓으면 2열 배열이 되고 이걸 2차원 배열🗳️🗳️이라고 합니다.

- 선언
    - 2차원 배열을 선언할 때는 1차원 배열에 대괄호를 하나 더 추가해 주면 됩니다.
        - `int[][] array`
        - `int array[][]`
        - `int[] array[]`
    - 1차원 배열과 2차원 배열의 선언에 따른 저장소 할당의 차이점을 그림으로 표현하면 아래와 같습니다. (노란색 네모 안의 코드로 해당 값을 하나의 변수로써 저장하거나 조회할 수 있습니다.)

- 생성
    - 2차원 배열을 생성할 때도 대괄호를 하나 더 추가하면 됩니다.
        - `int[][] array = new int[][];`
- 초기화
    - 2차원 배열을 초기화는 아래 2가지 방법이 있습니다.
    1. 중괄호를 사용해 선언과 동시에 초기화합니다.

    ```java
    // 중괄호를 사용해 초기화

    int[][] array = {
    	{1, 2, 3},
    	{4, 5, 6}
    };
    ```

    1. 선언/생성 이후 반복문을 통해 초기화를 합니다.

    ```java
    // 반복문을 통한 초기화

    int[][] array = new int[2][3]; // 최초 선언

    for (int i = 0; i < array.length; i++) {
        for (int j = 0; j < array[i].length; j++) {
            arr[i][j] = 0;  // i, j 는 위 노란색 네모박스 안에있는 숫자를 의미하며 인덱스 라고 부릅니다.
        }
    }
    ```

- 가변 배열
    - Java 프로그래밍에서는 2차원 배열을 생성할 때 열의 길이를 생략하여, 행마다 다른 길이의 배열을 요소로 저장할 수 있습니다.
    - 이렇게 행마다 다른 길이의 배열을 저장할 수 있는 배열을 가변 배열이라고 합니다.

2차원 배열 이상의 다차원 배열 이해
2차원 배열 외에도 3차원, 4차원 등..이 있지만 거의 대부분 3차원까지만 사용하는 경우가 많습니다.
그럼, 3차원 배열에 대해서 알아볼까요?
3차원 배열 선언은 2차원 배열 생성에 괄호를 하나 더해주면 됩니다.
ex. int[][][] multiArrary
초기화할 때는 중괄호를 더 추가하면 됩니다.
{{{배열원소1}, {배열원소2}}, {{배열원소3}}} 와 같은 형태로 초기화가 가능합니다.
[코드스니펫] 3차원 배열의 이해
// 3차원 배열의 이해

// 중괄호 3개를 써서 3차원 배열 초기화를 할 수 있습니다.
int[][][] MultiArray = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}};

​
다차원 배열 조회
2차원 배열 조회할 때는 2차원 인덱스를 가진만큼 2중 반복문을 통해 출력할 수 있습니다.
2중 반복문을 통해 가변 배열도 출력 가능합니다.

[코드스니펫] 가변 2차원 배열 조회
// 가변 2차원 배열 조회
int[][] array = {
	{10, 20, 30},
	{10, 20, 30, 40},
	{10, 20}
};

for (int i = 0; i < array.length; i++) { // 1차원 길이
	for (int j = 0; j < array[i].length; j++) { // 2차원 길이
		System.out.println(array[i][j]); // 2중 반복문으로 i, j 인덱스 순회
	}
}

// 출력
10
20
30
10
20
30
40
10
20

[코드스니펫] 최대값 구하기
// 최대값 구하기

int[] arr = { 3, 2, 1, 5, 1 };

// 최대값 초기값 세팅
int max = arr[0];

// 최대값 구하기
for (int num : arr) {
    if (num > max) { // 반복문 돌면서 나(max)보다 값이 작으면 저장
        max = num;
    }
}

// 최대값 5 출력
System.out.println(max);

// 최대값 구하기

int[] arr = { 3, 2, 1, 5, 1 };

// 최대값 초기값 세팅
int max = arr[0];

// 최대값 구하기
for (int num : arr) {
    if (num > max) { // 반복문 돌면서 나(max)보다 값이 작으면 저장
        max = num;
    }
}

// 최대값 5 출력
System.out.println(max);

- **[코드스니펫]** 최소값 구하기
    // 최소값 구하기

    int[] arr = { 3, 2, 1, 5, 1 };

    // 최소값 초기값 세팅
    int min = arr[0];

    // 최소값 구하기
    for (int num : arr) {
        if (num < min) { // 반복문 돌면서 나(min)보다 값이 작으면 저장
            min = num;
        }
    }

    // 최소값 1 출력
    System.out.println(min);
    ```


------------------------// 컬렉션
📌 Java 프로그래밍에서는 배열🗳️을 더 고도화 시켜서 컬렉션🧬이라는 이름으로 참조형 분류통(자료구조)를 제공하고 있습니다. 컬렉션은 참조형 변수만 저장함으로써 여러 기능을 많이 제공합니다.

컬렉션🧬은 여러 가지 종류가 있고, 이러한 컬렉션🧬들은 데이터를 넣고 빼는 방법이 각자 다르기 때문에 용도에 맞게 사용합니다.
🧑‍🎓어떤 컬렉션🧬들이 있고 어떻게 사용하는지 학습해 봅시다!

- 컬렉션🧬  이해하기
  - Java에서 컬렉션🧬 은 배열보다 다수의 참조형 데이터를 더 쉽고 효과적으로 처리할 수 있는 기능을 많이 가지고 있습니다.
  - 컬렉션🧬 기능 : 크기 자동 조정/ 추가/ 수정/ 삭제/ 반복/ 순회/ 필터/ 포함 확인 등….