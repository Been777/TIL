# 내일배움캠프 240611 TIL
Java 41일차
ㄷㅔ이터 검증하기
-------------------------------------------------------------------------------




# 데이터 검증하기

## 14. Validation

- Validation이란?

    <aside>
    📌 프로그래밍을 하는데에 있어서 가장 중요한 부분 중 하나입니다.

    - 특히나 Java는 null 값에 대한 접근에 대해 NullPointerException 오류가 발행하기 때문에 이러한 부분을 예방하기 위해 Validation 즉, 검증 과정이 필요합니다.
    - Spring에서는 null 확인 뿐 아니라 문자의 길이 측정과 같은 다른 검증 과정도 쉽게 처리할 수 있도록 **Bean Validation** 제공하고 있습니다.
    </aside>

    - **Bean Validation**
        - 간편하게 사용할 수 있는 여러 애너테이션을 제공 해줍니다.
        - 제공되는 애너테이션 일부를 학습해보겠습니다.


            | @NotNull | null 불가 |
            | --- | --- |
            | @NotEmpty | null, “” 불가 |
            | @NotBlank | null, “”. “ “ 불가 |
            | @Size | 문자 길이 측정 |
            | @Max | 최대값 |
            | @Min | 최소값 |
            | @Positive | 양수 |
            | @Negative | 음수 |
            | @Email | E-mail 형식 |
            | @Pattern | 정규 표현식 |
    - 프로젝트 설정
        - [코드 스니펫] build.gradle : validation

            ```groovy
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            ```


- Validation 적용
    1. ProductRequestDto
        - [코드 스니펫] ProductRequestDto

            ```java
            package com.sparta.springauth.dto;

            import jakarta.validation.constraints.*;
            import lombok.Getter;

            @Getter
            public class ProductRequestDto {
                @NotBlank
                private String name;
                @Email
                private String email;
                @Positive(message = "양수만 가능합니다.")
                private int price;
                @Negative(message = "음수만 가능합니다.")
                private int discount;
                @Size(min=2, max=10)
                private String link;
                @Max(10)
                private int max;
                @Min(2)
                private int min;
            }
            ```

    2. @Valid
        - **Bean Validation**을 적용한 해당 Object validation 실행
            - [코드 스니펫] testValid

                ```java
                @PostMapping("/validation")
                @ResponseBody
                public ProductRequestDto testValid(@RequestBody @Valid ProductRequestDto requestDto) {
                    return requestDto;
                }
                ```

        - JSON 데이터
            - [코드 스니펫] JSON 데이터

                ```json
                {
                    "name" : "Robbie",
                    "email" : "Robbie@gmail.com",
                    "price" : 1234,
                    "discount" : -1234,
                    "link" : "54321",
                    "max" : 10,
                    "min" : 2
                }
                ```



## 15. Validation 예외처리

- 회원가입 적용
    1. SignupRequestDto
        - [코드 스니펫] SignupRequestDto

            ```java
            package com.sparta.springauth.dto;

            import jakarta.validation.constraints.Email;
            import jakarta.validation.constraints.NotBlank;
            import lombok.Getter;
            import lombok.Setter;

            @Getter
            @Setter
            public class SignupRequestDto {
                @NotBlank
                private String username;
                @NotBlank
                private String password;
                @Email
                @NotBlank
                private String email;
                private boolean admin = false;
                private String adminToken = "";
            }
            ```

    2. UserController : signup에 `@Valid` 적용

        ```java
        @PostMapping("/user/signup")
        public String signup(@Valid SignupRequestDto requestDto) {
            userService.signup(requestDto);

            return "redirect:/api/user/login-page";
        }
        ```

- Validation 예외처리
    - 회원가입 진행 시 데이터 검증 시 오류가 발생했을 때 로그인 페이지가 아니라 회원가입 페이지로 이동 하려면 Validation 예외를 처리해야합니다.


    - **BindingResult**
        - 예외가 발생하면 BindingResult 객체에 오류에 대한 정보가 담깁니다.
        - 파라미터로 BindingResult 객체를 받아올 수 있습니다.

        ```java
        @PostMapping("/user/signup")
        public String signup(@Valid SignupRequestDto requestDto, BindingResult bindingResult) {
            // Validation 예외처리
            List<FieldError> fieldErrors = bindingResult.getFieldErrors();
            if(fieldErrors.size() > 0) {
                for (FieldError fieldError : bindingResult.getFieldErrors()) {
                    log.error(fieldError.getField() + " 필드 : " + fieldError.getDefaultMessage());
                }
                return "redirect:/api/user/signup";
            }

            userService.signup(requestDto);

            return "redirect:/api/user/login-page";
        }
        ```

        - [코드 스니펫] UserController

            ```java
            package com.sparta.springauth.controller;

            import com.sparta.springauth.dto.LoginRequestDto;
            import com.sparta.springauth.dto.SignupRequestDto;
            import com.sparta.springauth.service.UserService;
            import jakarta.servlet.http.HttpServletResponse;
            import jakarta.validation.Valid;
            import lombok.extern.slf4j.Slf4j;
            import org.springframework.stereotype.Controller;
            import org.springframework.validation.BindingResult;
            import org.springframework.validation.FieldError;
            import org.springframework.web.bind.annotation.GetMapping;
            import org.springframework.web.bind.annotation.PostMapping;
            import org.springframework.web.bind.annotation.RequestMapping;

            import java.util.List;

            @Slf4j
            @Controller
            @RequestMapping("/api")
            public class UserController {

                private final UserService userService;

                public UserController(UserService userService) {
                    this.userService = userService;
                }

                @GetMapping("/user/login-page")
                public String loginPage() {
                    return "login";
                }

                @GetMapping("/user/signup")
                public String signupPage() {
                    return "signup";
                }

                @PostMapping("/user/signup")
                public String signup(@Valid SignupRequestDto requestDto, BindingResult bindingResult) {
                    // Validation 예외처리
                    List<FieldError> fieldErrors = bindingResult.getFieldErrors();
                    if(fieldErrors.size() > 0) {
                        for (FieldError fieldError : bindingResult.getFieldErrors()) {
                            log.error(fieldError.getField() + " 필드 : " + fieldError.getDefaultMessage());
                        }
                        return "redirect:/api/user/signup";
                    }

                    userService.signup(requestDto);

                    return "redirect:/api/user/login-page";
                }
            }
            ```

        - `bindingResult.getFieldErrors()`
            - 발생한 오류들에 대한 정보가 담긴 `List<FieldError>` 리스트를 가져옵니다.