# 내일배움캠프 240514 TIL
Java 20일차
개인 숙제, Gradle, 서버, HTTP
--------------------------------------------

자바의 정석 기초편 연습문제 개인 숙제 시작.
Chapter 6
객체지향 프로그래밍

============================================================

[연습문제] 6-3 Student 정의
(타입), (변수), (설명x = 설명은 변수와 타입에 대한 설명)
String name;
int ban;
int no;
int kor;
int eng;
int math;

// 이제 타입, 변수, 설명 내주고 class 정의하라고 하면 쉽게 할 수 있음

============================================================

// 메인 메서드
[연습문제]/ch6/Exercise6_4.java
class Exercise6_4 {
    public static void main(String args[]) {
        Student s = new Student(); s.name = "홍길동";
        s.ban = 1;
        s.no = 1;
        s.kor = 100;
        s.eng = 60;
        s.math = 76;
        System.out.println("이름:"+s.name);
        System.out.println("총점:"+s.getTotal()); // Student라는 객체 안에서 Total 가져옴
        System.out.println("평균:"+s.getAverage());
    }
}
============================================================

//// 객체 (1차풀이) 처음엔 생각나는 대로 풀어봄
//class Student {
//    String name;
//    int ban;
//    int no;
//    int kor;
//    int eng;
//    int math;
//
//    int Total = new Total = kor + eng + math;
//    float Average = new Average = (kor + eng + math)/3;
//}

//// 객체 2차풀이 최대한 생각나는 대로 푼 다음 자료를 찾아보며 풀기
//    public int getTotal() { // 강의자료 찾아봄
//        return Total;
//    }
//
//    public float getAverage() {
//        return Average;
//    }
//}

// 객체 3차풀이 자료 찾아서 계속 풀다보면 완성도있게 만들어짐
    public int getTotal() { // 국어, 영어, 수학의 점수를 모두 더해서 반환한다. 라는 기능을 추가함
        Total = kor + eng + math;
        return Total;
    }

    public float getAverage() { // 총점을 과목수로 나눈 평균을 구한다.
        Average = Total / 3;
        return Average;
    }
}
============================================================



## 그레이들(Gradle)이란 무엇일까?

- Gradle이란?
    - Gradle은 빌드 자동화 시스템입니다.
    - 우리가 작성한 Java 코드를 설정에 맞게 자동으로 Build해 줍니다.
        - Build란 소스 코드를 실행 가능한 결과물로 만드는 일련의 과정을 뜻합니다.
        - Gradle을 사용하면 간편하게 Java 소스 코드를 실행한 가능한 jar 파일로 만들어줍니다.

    - build.gradle
        - build.gradle은 Gradle 기반의 빌드 스크립트입니다.
        - 이 스크립트를 작성하면 소스 코드를 빌드하고 라이브러리들의 의존성을 쉽게 관리할 수 있습니다.
        - groovy 혹은 kotlin 언어로 스크립트를 작성할 수 있습니다.

            ![Screen Shot 2023-05-30 at 8.43.24 PM.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/267fd6d8-deb7-4f14-a5ca-b25e9e257eea/Screen_Shot_2023-05-30_at_8.43.24_PM.png)

        - 우리가 개발을 하면서 필요로하는 외부 라이브러리들을 dependencies 부분에 작성하면 Gradle이 해당 라이브러리들을 [Maven Repository](https://mvnrepository.com/) 와 같은 외부 저장소에서 자동으로 다운로드해옵니다.
            - Maven Repository는 라이브러리들을 모아둔 저장소 입니다
        - 또한 다른 라이브러리들과의 의존성을 자동으로 관리해 주기 때문에 라이브러리들간의 충돌 걱정없이 개발에만 집중할 수 있습니다.
            - 라이브러리란 필요한 기능들이 모여있는 코드의 묶음이라 생각하시면 됩니다.
            - 개발자들은 모든 기능을 전부 직접 구현하지 않고 미리 작성되어있는 라이브러리들을 사용하여 기능을 빠르고 쉽게 구현할 수 있습니다.
        - SpringBoot의 버전을 변경하고 싶다면 ‘3.1.0’ 부분을 원하는 버전으로 수정하시면 됩니다.

## 서버란 무엇일까?

- 네트워크란?
    📌 네트워크는 여러대의 컴퓨터 또는 장비가 서로 연결되어서 정보를 주고 받을 수 있게 도와주는 기술입니다.
    - 컴퓨터, 라우터, 스위치, 허브 등의 장비들이 각각의 역할을 수행하여 정보를 주고 받습니다.
    - 서로 정보를 주고 받기 위해서는 IP 주소, 서브넷 마스크, 게이트웨이등의 정보를 설정하고 네트워크 프로토콜을 이용하여 통신을 하게 됩니다.
    - 우리는 왜 네트워크를 알아야 할까요?
    - 우리는 사용자가 요청을 했을 때 해당 요청에 대한 응답을 수행하는 프로그램 즉, 서버를 개발하게 될 겁니다.
    - 그렇다면 사용자의 요청에서 시작하여 우리가 만든 서버에 도착하고 다시 사용자에게 까지 되돌아가는 흐름을 잘 파악하고 있다면 서버 개발에 큰 도움이 되겠죠?

- Client와 Server
    - Client 즉, 브라우저에서 서버에 정보를 요청하는 과정을 간략하게 표현한 부분입니다.
    - 보시는 것 처럼 사용자는 브라우저를 이용하여 서버에 정보를 요청하고 응답을 받습니다.
    - 이때 사용자의 요청이 서버에 도달하기 위해서는 해당 서버의 정보가 필요합니다.
    - 이 때 사용자의 요청이 해당 서버에 정확하게 도달할 수 있게 제공되는 정보가 IP 주소입니다.
    👌 192.168.0.123 와 같이 생긴 숫자가 IP주소라고 불리는 것을 본 적 있으시죠?
    - 거대한 네트워크망에서 여러분의 컴퓨터를 식별하기 위한 위치 주소 입니다.
    - 네트워크상에서의 데이터 **송/수신은** 이 주소를 기준으로 이루어지고 있습니다.
    - IP 주소를 주소라는 이름에 맞게 쉽게 이해할 수 있도록 택배에 비교해 보겠습니다.

    택배 주소 : 서울시 ~
    택배 받는 사람 : Robbie
    네트워크 주소(IP) : 192. ~
    네트워크 받는 사람(포트) : 8080
    - 우리가 택배를 받기 위해서는 택배를 받을 실제 주소와 받는 사람을 알려줘야 합니다.
    - 마찬가지로 네트워크에서도 정보를 요청 받고 전달하려면 주소에 해당하는 IP 와 받는 사람에 해당하는 포트번호를 알려줘야 합니다.

- 웹 서버란?
    - 웹 서버는 인터넷을 통해 HTTP를 이용하여 웹상의 클라이언트의 요청을 응답해주는 통신을 하는 일종의 컴퓨터입니다.
    - 오늘날 우리가 자주 사용하는 이메일이나 SNS 등 대부분의 서비스는 웹 서버를 통해 우리가 사용할 수 있게 되었습니다.
    - 웹 서버의 기본 동작 원리
        1. 브라우저를 통해 HTTP Request로 웹사이트를 웹서버에 요청합니다.
        2. 이후 웹서버는 요청을 승인하고 HTTP Response를 통해 웹사이트 데이터를 브라우저에 전송합니다.
        3. 마지막으로 브라우저는 서버에서 받아온 데이터를 이용해 웹사이트를 브라우저에 그려내는 일을 합니다.
        * 기본적으로 브라우저가 웹서버에 요청을 할때는 항상 GET method로 요청하게 됩니다.

- API란?
    > API(application programming interface)는 다른 소프트웨어 시스템과 통신하기 위해 따라야 하는 규칙을 정의합니다.
    > 개발자는 다른 애플리케이션이 프로그래밍 방식으로 애플리케이션과 통신할 수 있도록 API를 표시하거나 생성합니다.
    > 인터페이스(interface)는 서로 다른 두 개의 시스템, 장치 사이에서 정보나 신호를 주고받는 경우의 접점이나 경계면을 의미합니다.
    즉, 사용자가 기기를 쉽게 동작시키는데 도움을 주는 시스템을 의미합니다.

    📌 쉽게 표현해보자면 API는 하나의 "약속" 입니다.
    서로 다른 애플리케이션이 약속한 방식의 API 요청을 수행하면 정해진 결과물을 반환합니다.
    주문을 받으면 해당 주문의 음식을 가져다 주는 식당의 점원이라고 비유적으로 이해하시면 좋을 것 같습니다.

- RESTful API란?

    > Representational State Transfer(REST)는 API 작동 방식에 대한 조건을 부과하는 소프트웨어 아키텍처입니다.
    REST는 처음에 인터넷과 같은 복잡한 네트워크에서 통신을 관리하기 위한 지침으로 만들어졌습니다.
    REST 아키텍처 스타일을 따르는 API를 REST API라고 합니다.
    REST 아키텍처를 구현하는 웹 서비스를 RESTful 웹 서비스라고 합니다.
    - 조금 일반적으로 쉬운 말로 바꾸면, 여러분 서버의 api가 적절하게  http를 준수하며 잘 설계되어있으면 RESTful 하게 설계되어 있다고 생각하시면 좋습니다.
    - 예를들어 API의 리소스 식별자를  중복 없이 고유하게 잘 만들고
    - 해당 API에 적절하게 HTTP 메서드를 사용했다면, RESTful하게 설계했다고 볼 수 있습니다.

- Apache Tomcat이란 무엇일까?
    - Web Server 와 Web Application Server(WAS)
        - 브라우저에서 URL을 입력하여 어떠한 페이지를 요청했을 때 HTTP의 요청을 받아들여 HTML 문서와 같은 정적인 콘텐츠를 사용자에게 전달해주는 역할을 하는 것이 Web Server입니다.
        - 웹 서버의 역할을 크게 2가지로 구분해보면
            1. 정적인 콘텐츠 즉, 이미 완성이 되어있는 HTML과 같은 문서를 브라우저로 전달합니다.
            2. 브라우저로부터 ‘로그인하여 MyPage를 요청’과 같은 동적인 요청이 들어왔을 때 웹 서버 자체적으로 처리하기 어렵기 때문에 해당 요청을 WAS에 전달합니다.
            * 종류로는 Apache, Nginx 등이 있습니다.

        - WAS는 웹 서버와 똑같이 HTTP 기반으로 동작이 됩니다.
        - 웹 서버에서 할 수 있는 기능 대부분을 WAS에서도 처리할 수 있습니다.
        - WAS를 사용하면 로그인,회원가입을 처리하거나 게시물을 조회하거나 정렬하는 등의 다양한 로직들을 수행하는 프로그램을 동작시킬 수 있습니다.
            * 종류로는 Tomcat, JBoss 등이 있습니다.

    - Apache Tomcat이란?
        - Tomcat은 동적인 처리를 할 수 있는 웹 서버를 만들기 위한 웹 컨테이너입니다.
        - Apache Tomcat이란 Apache와 Tomcat이 합쳐진 형태로 정적인 데이터 처리와 동적인 데이터 처리를 효율적으로 해줄 수 있습니다.

    - SpringBoot와 Spring

        - Spring 프레임워크는 2004년에 1.0이 등장한 이후 20년가까이 사랑받으며 계속해서 업그레이드 해온 현재는 Spring 6.0이 등장한 아주 오래되고 강력한 프레임워크입니다.
        - Spring 프레임워크는 AOP, IoC/DI 등과 같은 아주 강력한 핵심 기능들을 가지고 있습니다.
        - 하지만 이러한 핵심 기능들을 사용하기 위해서는 너무나도 많은 xml 설정들이 필요했습니다.
        - 이러한 불편한 점들을 개선하기 위해 2014년 SpringBoot가 등장했습니다.
        - SpringBoot는 기존의 xml 설정 대신 Java의 애너테이션 기반의 설정을 적극적으로 사용하고 있기 때문에 무겁고 작성하기 힘들던 xml 대신에 애너테이션을 사용하여 아주 간편하게 설정할 수 있습니다.
            - 기본적으로 개발에 필요한 설정 정보들을 일반적으로 많이 사용하는 설정 값을 default로 하여 자동으로 설정해주고 있습니다.
        - 또한 외부 라이브러리나 하위 프레임워크들의 의존성 관리가 매우 쉬워졌습니다.
        - 기존에는 외부 라이브러리와 프레임워크를 사용하기 위해서 각각의 버전들의 호환성을 직접 확인해가면서 의존성들을 설정해야 했지만 SpringBoot에서는 `spring-boot-starter-web` 처럼 필요한 외부 라이브러리들과 프레임워크들을 의존성에 맞게 starter로 묶어서 제공해 줍니다.
            - 따라서 이전처럼 각각의 버전 호환성을 직접 확인할 필요가 없어졌습니다.
        - 마지막으로 SpringBoot의 강력한 점을 물어봤을 때 대답하는 것 중 하나가 바로 내장 Apache Tomcat 입니다.
        - Spring 프레임워크에서는 서버를 실행시키기 위해 Apache Tomcat을 직접 다운로드 받고 설정하고 프로젝트에 삽입 했어야 했습니다.
        - 이러한 불편함을 해결하기 위해 SpringBoot에서는 기본적으로 `starter-web` dependency를 설정하면 자동으로 내장형 Apache Tomcat을 제공해 줍니다.
        - 말 그대로 Apache Tomcat이 내장되어있기 때문에 개발자가 따로 다운로드 받고 설정하고 삽입할 필요없이 바로 사용할 수 있게 되었습니다.

    - Postman이란?
        - Postman이란 API 개발을 빠르고 쉽게 구현할 수 있도록 도와주는 소프트웨어 플렛폼입니다.
        - API는 하나의 "약속" 이라 배웠습니다.
        - 우리가 API 즉, 약속에 맞춰서 HTTP 요청을 서버에 보내고 응답을 확인해봐야 우리가 만든 서버가 제대로 동작 하는지 확인할 수 있습니다.
        - 이러한 확인 작업을 간편하게 할 수 있도록 도와주는 플렛폼 중 하나가 Postman입니다.

    - Hello World!
        - spring-prepare 프로젝트와 Postman을 사용하여 “Hello World!”를 출력하는 API를 만들고 테스트 해보겠습니다.
        - API 테이블은 API들을 한눈에 확인하고 협업하는 개발자들과 소통하기 위해 작성하는 일종의 표입니다.